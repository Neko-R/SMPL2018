
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 28 09:58:06 EST 2018
//----------------------------------------------------

package smpl.syntax;

import smpl.semantics.*;
import smpl.values.*;
import smpl.syntax.IRExpProc.*;
import smpl.builtIn_necessities.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 28 09:58:06 EST 2018
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\012\005\000\002\002\006\000\002\002\006\000\002" +
    "\036\003\000\002\036\003\000\002\013\010\000\002\013" +
    "\003\000\002\014\006\000\002\014\010\000\002\044\003" +
    "\000\002\044\003\000\002\044\005\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\035\013\000\002" +
    "\035\013\000\002\022\007\000\002\022\011\000\002\022" +
    "\005\000\002\023\003\000\002\023\003\000\002\024\006" +
    "\000\002\024\006\000\002\024\005\000\002\024\004\000" +
    "\002\024\004\000\002\024\003\000\002\015\012\000\002" +
    "\015\006\000\002\016\005\000\002\017\005\000\002\017" +
    "\003\000\002\011\007\000\002\030\005\000\002\030\003" +
    "\000\002\031\005\000\002\032\005\000\002\032\003\000" +
    "\002\033\005\000\002\033\003\000\002\034\004\000\002" +
    "\034\003\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\003\000\002\046\002\000\002\047\005\000" +
    "\002\047\005\000\002\047\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\003\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\003" +
    "\000\002\042\005\000\002\042\003\000\002\050\004\000" +
    "\002\050\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\005" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\043\005\000\002\043\006\000\002" +
    "\020\005\000\002\020\003\000\002\021\005\000\002\021" +
    "\003\000\002\025\010\000\002\025\006\000\002\025\005" +
    "\000\002\007\005\000\002\027\005\000\002\027\005\000" +
    "\002\026\005\000\002\026\003\000\002\010\005\000\002" +
    "\010\005\000\002\045\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\110\002\uffc6\004\017\006\uffc6\012\051\014" +
    "\057\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044\033\047" +
    "\014\050\022\053\056\054\062\055\061\056\027\061\020" +
    "\062\065\063\054\064\012\065\016\066\053\067\060\070" +
    "\023\071\015\072\042\073\035\074\026\001\002\000\004" +
    "\002\320\001\002\000\104\004\017\007\uffc6\011\uffc6\012" +
    "\051\014\057\016\005\017\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042" +
    "\024\044\033\047\014\050\022\053\056\055\061\056\027" +
    "\063\054\064\012\065\016\066\053\067\060\070\023\071" +
    "\015\072\042\073\035\074\026\001\002\000\024\002\uffec" +
    "\005\uffec\006\uffec\007\uffec\011\uffec\013\uffec\015\uffec\017" +
    "\uffec\046\uffec\001\002\000\076\002\uffac\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\011\uffac\013\uffac\014\uffac\015\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\040\uffac\041\uffac\043\uffac\045\uffac" +
    "\046\uffac\001\002\000\006\002\001\006\165\001\002\000" +
    "\024\002\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2" +
    "\015\ufff2\017\ufff2\046\ufff2\001\002\000\004\004\306\001" +
    "\002\000\024\002\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd" +
    "\013\ufffd\015\ufffd\017\ufffd\046\ufffd\001\002\000\004\012" +
    "\271\001\002\000\076\002\uffb5\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\011\uffb5\013\uffb5\014\uffb5\015\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\040\uffb5\041\uffb5\043\uffb5\045\uffb5\046\uffb5" +
    "\001\002\000\076\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\040\uffb6\041\uffb6\043\uffb6\045\uffb6\046\uffb6\001" +
    "\002\000\102\004\017\005\uffc6\007\uffc6\012\051\014\057" +
    "\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\037\032\040\uffc6\041\uffc6\042\024\044\033\047\014" +
    "\050\022\053\056\055\061\056\027\063\054\064\012\065" +
    "\016\066\053\067\060\070\023\071\015\072\042\073\035" +
    "\074\026\001\002\000\004\004\256\001\002\000\052\002" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013\uffc7\015\uffc7" +
    "\017\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\212\036\213\040\uffc7\041\uffc7\045\uffc7\046\uffc7" +
    "\001\002\000\004\004\243\001\002\000\076\002\uffb3\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\043" +
    "\uffb3\045\uffb3\046\uffb3\001\002\000\106\002\uffc6\004\017" +
    "\005\uffc6\006\uffc6\007\uffc6\011\uffc6\013\uffc6\014\057\015" +
    "\uffc6\016\005\017\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\045" +
    "\uffc6\046\uffc6\056\027\063\054\064\012\065\016\066\053" +
    "\067\060\070\023\071\015\072\042\073\035\074\026\001" +
    "\002\000\024\002\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc" +
    "\013\ufffc\015\ufffc\017\ufffc\046\ufffc\001\002\000\076\002" +
    "\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf\041" +
    "\uffaf\043\uffaf\045\uffaf\046\uffaf\001\002\000\004\004\235" +
    "\001\002\000\024\002\uffee\005\uffee\006\uffee\007\uffee\011" +
    "\uffee\013\uffee\015\uffee\017\uffee\046\uffee\001\002\000\076" +
    "\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\013" +
    "\uffab\014\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\040\uffab" +
    "\041\uffab\043\uffab\045\uffab\046\uffab\001\002\000\040\004" +
    "\017\014\057\016\005\037\032\056\027\063\054\064\012" +
    "\065\016\066\053\067\060\070\023\071\015\072\042\073" +
    "\035\074\026\001\002\000\064\004\017\014\057\016\005" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037" +
    "\032\040\uffc6\041\uffc6\042\024\045\uffc6\056\027\063\054" +
    "\064\012\065\016\066\053\067\060\070\023\071\015\072" +
    "\042\073\035\074\026\001\002\000\024\002\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\011\ufffa\013\ufffa\015\ufffa\017\ufffa\046" +
    "\ufffa\001\002\000\076\002\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1\046\uffb1" +
    "\001\002\000\076\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\040\uffaa\041\uffaa\043\uffaa\045\uffaa\046\uffaa\001" +
    "\002\000\070\002\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9" +
    "\013\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\223\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\040\uffb9\041\uffb9\043" +
    "\uffb9\045\uffb9\046\uffb9\001\002\000\066\002\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\011\uffbf\013\uffbf\015\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\174\023\175\024\173\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040" +
    "\uffbf\041\uffbf\043\uffbf\045\uffbf\046\uffbf\001\002\000\076" +
    "\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad\013" +
    "\uffad\014\uffad\015\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\040\uffad" +
    "\041\uffad\043\uffad\045\uffad\046\uffad\001\002\000\076\002" +
    "\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\041" +
    "\uffb2\043\uffb2\045\uffb2\046\uffb2\001\002\000\024\002\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\011\ufff4\013\ufff4\015\ufff4\017" +
    "\ufff4\046\ufff4\001\002\000\024\002\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\011\ufff5\013\ufff5\015\ufff5\017\ufff5\046\ufff5\001" +
    "\002\000\046\002\uffce\005\uffce\006\uffce\007\uffce\011\uffce" +
    "\013\uffce\015\uffce\017\uffce\027\207\030\204\031\210\032" +
    "\203\033\205\034\206\040\uffce\041\uffce\045\uffce\046\uffce" +
    "\001\002\000\060\002\uffc3\005\uffc3\006\uffc3\007\uffc3\011" +
    "\uffc3\013\uffc3\015\uffc3\017\uffc3\020\167\021\170\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\040\uffc3\041\uffc3\043\171\045\uffc3\046\uffc3\001\002" +
    "\000\032\002\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013" +
    "\uffd0\015\uffd0\017\uffd0\040\uffd0\041\uffd0\045\uffd0\046\uffd0" +
    "\001\002\000\032\002\uffd2\005\uffd2\006\uffd2\007\uffd2\011" +
    "\uffd2\013\uffd2\015\uffd2\017\uffd2\040\074\041\uffd2\045\uffd2" +
    "\046\uffd2\001\002\000\110\004\017\006\uffc6\012\051\013" +
    "\uffc6\014\057\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044" +
    "\033\047\014\050\022\053\056\054\062\055\061\056\027" +
    "\061\020\062\065\063\054\064\012\065\016\066\053\067" +
    "\060\070\023\071\015\072\042\073\035\074\026\001\002" +
    "\000\024\002\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\013" +
    "\uffeb\015\uffeb\017\uffeb\046\uffeb\001\002\000\076\002\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\041\uffb0" +
    "\043\uffb0\045\uffb0\046\uffb0\001\002\000\004\004\161\001" +
    "\002\000\024\002\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb" +
    "\013\ufffb\015\ufffb\017\ufffb\046\ufffb\001\002\000\004\004" +
    "\147\001\002\000\102\004\017\007\uffc6\012\051\014\057" +
    "\015\uffc6\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044\033" +
    "\047\014\050\022\053\056\055\061\056\027\063\054\064" +
    "\012\065\016\066\053\067\060\070\023\071\015\072\042" +
    "\073\035\074\026\001\002\000\076\002\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\043\uffb4\045" +
    "\uffb4\046\uffb4\001\002\000\006\004\116\066\117\001\002" +
    "\000\004\066\114\001\002\000\074\002\uffb7\004\077\005" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\013\uffb7\014\076\015\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\112\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\043\uffb7\046" +
    "\uffb7\001\002\000\024\002\uffea\005\uffea\006\uffea\007\uffea" +
    "\011\uffea\013\uffea\015\uffea\017\uffea\046\uffea\001\002\000" +
    "\004\004\107\001\002\000\010\002\ufffe\006\ufffe\013\ufffe" +
    "\001\002\000\066\002\uffbb\005\uffbb\006\uffbb\007\uffbb\011" +
    "\uffbb\013\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb\043\uffbb" +
    "\045\uffbb\046\uffbb\001\002\000\026\002\uffef\005\uffef\006" +
    "\uffef\007\uffef\011\uffef\013\uffef\015\uffef\017\uffef\041\071" +
    "\046\uffef\001\002\000\106\002\uffc6\004\017\005\uffc6\006" +
    "\uffc6\007\uffc6\011\uffc6\013\uffc6\014\057\015\uffc6\016\005" +
    "\017\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\037\032\040\uffc6\041\uffc6\042\024\045\uffc6\046\uffc6" +
    "\056\027\063\054\064\012\065\016\066\053\067\060\070" +
    "\023\071\015\072\042\073\035\074\026\001\002\000\074" +
    "\002\uffb7\004\077\005\uffb7\006\uffb7\007\uffb7\011\uffb7\013" +
    "\uffb7\014\076\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7" +
    "\043\uffb7\045\uffb7\046\uffb7\001\002\000\032\002\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\011\uffd3\013\uffd3\015\uffd3\017\uffd3" +
    "\040\074\041\uffd3\045\uffd3\046\uffd3\001\002\000\106\002" +
    "\uffc6\004\017\005\uffc6\006\uffc6\007\uffc6\011\uffc6\013\uffc6" +
    "\014\057\015\uffc6\016\005\017\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6" +
    "\042\024\045\uffc6\046\uffc6\056\027\063\054\064\012\065" +
    "\016\066\053\067\060\070\023\071\015\072\042\073\035" +
    "\074\026\001\002\000\032\002\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\013\uffd1\015\uffd1\017\uffd1\040\uffd1\041\uffd1" +
    "\045\uffd1\046\uffd1\001\002\000\100\004\017\012\051\014" +
    "\057\015\uffc6\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044" +
    "\033\047\014\050\022\053\056\055\061\056\027\063\054" +
    "\064\012\065\016\066\053\067\060\070\023\071\015\072" +
    "\042\073\035\074\026\001\002\000\102\004\017\005\uffc6" +
    "\007\uffc6\012\051\014\057\016\005\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6" +
    "\042\024\044\033\047\014\050\022\053\056\055\061\056" +
    "\027\063\054\064\012\065\016\066\053\067\060\070\023" +
    "\071\015\072\042\073\035\074\026\001\002\000\006\005" +
    "\103\007\102\001\002\000\010\005\uff9c\007\uff9c\015\uff9c" +
    "\001\002\000\104\004\017\005\uffc6\007\uffc6\012\051\014" +
    "\057\015\uffc6\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044" +
    "\033\047\014\050\022\053\056\055\061\056\027\063\054" +
    "\064\012\065\016\066\053\067\060\070\023\071\015\072" +
    "\042\073\035\074\026\001\002\000\076\002\uffa2\004\uffa2" +
    "\005\uffa2\006\uffa2\007\uffa2\011\uffa2\013\uffa2\014\uffa2\015" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\040\uffa2\041\uffa2\043\uffa2" +
    "\045\uffa2\046\uffa2\001\002\000\010\005\uff9d\007\uff9d\015" +
    "\uff9d\001\002\000\004\015\106\001\002\000\076\002\uffa8" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\011\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\040\uffa8\041\uffa8" +
    "\043\uffa8\045\uffa8\046\uffa8\001\002\000\100\004\017\005" +
    "\uffc6\012\051\014\057\016\005\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042" +
    "\024\044\033\047\014\050\022\053\056\055\061\056\027" +
    "\063\054\064\012\065\016\066\053\067\060\070\023\071" +
    "\015\072\042\073\035\074\026\001\002\000\004\005\111" +
    "\001\002\000\024\002\ufff6\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\013\ufff6\015\ufff6\017\ufff6\046\ufff6\001\002\000\120" +
    "\002\uffc6\004\017\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012" +
    "\051\013\uffc6\014\057\015\uffc6\016\005\017\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040" +
    "\uffc6\041\uffc6\042\024\044\033\046\uffc6\047\014\050\022" +
    "\053\056\055\061\056\027\063\054\064\012\065\016\066" +
    "\053\067\060\070\023\071\015\072\042\073\035\074\026" +
    "\001\002\000\024\002\ufff9\005\ufff9\006\ufff9\007\ufff9\011" +
    "\ufff9\013\ufff9\015\ufff9\017\ufff9\046\ufff9\001\002\000\120" +
    "\002\uffc6\004\017\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012" +
    "\051\013\uffc6\014\057\015\uffc6\016\005\017\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040" +
    "\uffc6\041\uffc6\042\024\044\033\046\uffc6\047\014\050\022" +
    "\053\056\055\061\056\027\063\054\064\012\065\016\066" +
    "\053\067\060\070\023\071\015\072\042\073\035\074\026" +
    "\001\002\000\024\002\ufff8\005\ufff8\006\ufff8\007\ufff8\011" +
    "\ufff8\013\ufff8\015\ufff8\017\ufff8\046\ufff8\001\002\000\016" +
    "\005\uff99\007\uff99\010\uff99\057\125\060\122\066\126\001" +
    "\002\000\126\002\uffc6\004\017\005\uffc6\006\uffc6\007\uffc6" +
    "\011\uffc6\012\051\013\uffc6\014\057\015\uffc6\016\005\017" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\037\032\040\uffc6\041\uffc6\042\024\044\033\046\uffc6\047" +
    "\014\050\022\053\056\054\062\055\061\056\027\061\020" +
    "\062\065\063\054\064\012\065\016\066\053\067\060\070" +
    "\023\071\015\072\042\073\035\074\026\001\002\000\024" +
    "\002\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\013\uffe5\015" +
    "\uffe5\017\uffe5\046\uffe5\001\002\000\010\005\132\007\131" +
    "\010\133\001\002\000\004\066\130\001\002\000\010\005" +
    "\uffe4\007\uffe4\010\uffe4\001\002\000\010\005\uffe3\007\uffe3" +
    "\010\uffe3\001\002\000\004\066\127\001\002\000\010\005" +
    "\uffdd\007\uffdd\010\uffdd\001\002\000\010\005\uffdf\007\uffdf" +
    "\010\uffdf\001\002\000\010\005\uffde\007\uffde\010\uffde\001" +
    "\002\000\010\057\141\060\140\066\142\001\002\000\126" +
    "\002\uffc6\004\017\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012" +
    "\051\013\uffc6\014\057\015\uffc6\016\005\017\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040" +
    "\uffc6\041\uffc6\042\024\044\033\046\uffc6\047\014\050\022" +
    "\053\056\054\062\055\061\056\027\061\020\062\065\063" +
    "\054\064\012\065\016\066\053\067\060\070\023\071\015" +
    "\072\042\073\035\074\026\001\002\000\004\066\134\001" +
    "\002\000\004\005\135\001\002\000\126\002\uffc6\004\017" +
    "\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\051\013\uffc6\014" +
    "\057\015\uffc6\016\005\017\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042" +
    "\024\044\033\046\uffc6\047\014\050\022\053\056\054\062" +
    "\055\061\056\027\061\020\062\065\063\054\064\012\065" +
    "\016\066\053\067\060\070\023\071\015\072\042\073\035" +
    "\074\026\001\002\000\024\002\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\013\uffe6\015\uffe6\017\uffe6\046\uffe6\001\002" +
    "\000\024\002\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\013" +
    "\uffe7\015\uffe7\017\uffe7\046\uffe7\001\002\000\004\066\144" +
    "\001\002\000\004\066\143\001\002\000\010\005\uffe0\007" +
    "\uffe0\010\uffe0\001\002\000\010\005\uffe2\007\uffe2\010\uffe2" +
    "\001\002\000\010\005\uffe1\007\uffe1\010\uffe1\001\002\000" +
    "\006\007\102\015\146\001\002\000\076\002\uffa1\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\011\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\040\uffa1\041\uffa1\043\uffa1" +
    "\045\uffa1\046\uffa1\001\002\000\004\066\152\001\002\000" +
    "\006\005\uffd5\007\uffd5\001\002\000\006\005\156\007\155" +
    "\001\002\000\004\027\153\001\002\000\104\004\017\005" +
    "\uffc6\006\uffc6\007\uffc6\012\051\014\057\016\005\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040" +
    "\uffc6\041\uffc6\042\024\044\033\047\014\050\022\053\056" +
    "\055\061\056\027\063\054\064\012\065\016\066\053\067" +
    "\060\070\023\071\015\072\042\073\035\074\026\001\002" +
    "\000\010\005\uffd4\006\uffd4\007\uffd4\001\002\000\004\066" +
    "\152\001\002\000\126\002\uffc6\004\017\005\uffc6\006\uffc6" +
    "\007\uffc6\011\uffc6\012\051\013\uffc6\014\057\015\uffc6\016" +
    "\005\017\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044\033\046" +
    "\uffc6\047\014\050\022\053\056\054\062\055\061\056\027" +
    "\061\020\062\065\063\054\064\012\065\016\066\053\067" +
    "\060\070\023\071\015\072\042\073\035\074\026\001\002" +
    "\000\024\002\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\013" +
    "\uffd7\015\uffd7\017\uffd7\046\uffd7\001\002\000\006\005\uffd6" +
    "\007\uffd6\001\002\000\004\005\162\001\002\000\076\002" +
    "\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\011\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\040\uff9b\041" +
    "\uff9b\043\uff9b\045\uff9b\046\uff9b\001\002\000\006\006\165" +
    "\013\164\001\002\000\024\002\uffed\005\uffed\006\uffed\007" +
    "\uffed\011\uffed\013\uffed\015\uffed\017\uffed\046\uffed\001\002" +
    "\000\112\002\uffc6\004\017\006\uffc6\012\051\013\uffc6\014" +
    "\057\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044\033\047" +
    "\014\050\022\053\056\054\062\055\061\056\027\061\020" +
    "\062\065\063\054\064\012\065\016\066\053\067\060\070" +
    "\023\071\015\072\042\073\035\074\026\001\002\000\010" +
    "\002\uffff\006\uffff\013\uffff\001\002\000\040\004\017\014" +
    "\057\016\005\037\032\056\027\063\054\064\012\065\016" +
    "\066\053\067\060\070\023\071\015\072\042\073\035\074" +
    "\026\001\002\000\040\004\017\014\057\016\005\037\032" +
    "\056\027\063\054\064\012\065\016\066\053\067\060\070" +
    "\023\071\015\072\042\073\035\074\026\001\002\000\040" +
    "\004\017\014\057\016\005\037\032\056\027\063\054\064" +
    "\012\065\016\066\053\067\060\070\023\071\015\072\042" +
    "\073\035\074\026\001\002\000\066\002\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\011\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1" +
    "\021\uffc1\022\174\023\175\024\173\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\040\uffc1" +
    "\041\uffc1\043\uffc1\045\uffc1\046\uffc1\001\002\000\040\004" +
    "\017\014\057\016\005\037\032\056\027\063\054\064\012" +
    "\065\016\066\053\067\060\070\023\071\015\072\042\073" +
    "\035\074\026\001\002\000\040\004\017\014\057\016\005" +
    "\037\032\056\027\063\054\064\012\065\016\066\053\067" +
    "\060\070\023\071\015\072\042\073\035\074\026\001\002" +
    "\000\040\004\017\014\057\016\005\037\032\056\027\063" +
    "\054\064\012\065\016\066\053\067\060\070\023\071\015" +
    "\072\042\073\035\074\026\001\002\000\066\002\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\011\uffbd\013\uffbd\015\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\040\uffbd\041\uffbd\043\uffbd\045\uffbd\046\uffbd\001\002\000" +
    "\066\002\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\040\uffbe\041\uffbe\043\uffbe\045\uffbe\046" +
    "\uffbe\001\002\000\066\002\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\013\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc\043" +
    "\uffbc\045\uffbc\046\uffbc\001\002\000\066\002\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\011\uffc0\013\uffc0\015\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\174\023\175\024\173\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\040" +
    "\uffc0\041\uffc0\043\uffc0\045\uffc0\046\uffc0\001\002\000\066" +
    "\002\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2\013\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\174\023\175\024\173" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\040\uffc2\041\uffc2\043\uffc2\045\uffc2\046\uffc2" +
    "\001\002\000\040\004\017\014\057\016\005\037\032\056" +
    "\027\063\054\064\012\065\016\066\053\067\060\070\023" +
    "\071\015\072\042\073\035\074\026\001\002\000\040\004" +
    "\017\014\057\016\005\037\032\056\027\063\054\064\012" +
    "\065\016\066\053\067\060\070\023\071\015\072\042\073" +
    "\035\074\026\001\002\000\040\004\017\014\057\016\005" +
    "\037\032\056\027\063\054\064\012\065\016\066\053\067" +
    "\060\070\023\071\015\072\042\073\035\074\026\001\002" +
    "\000\040\004\017\014\057\016\005\037\032\056\027\063" +
    "\054\064\012\065\016\066\053\067\060\070\023\071\015" +
    "\072\042\073\035\074\026\001\002\000\040\004\017\014" +
    "\057\016\005\037\032\056\027\063\054\064\012\065\016" +
    "\066\053\067\060\070\023\071\015\072\042\073\035\074" +
    "\026\001\002\000\040\004\017\014\057\016\005\037\032" +
    "\056\027\063\054\064\012\065\016\066\053\067\060\070" +
    "\023\071\015\072\042\073\035\074\026\001\002\000\052" +
    "\002\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\013\uffcb\015" +
    "\uffcb\017\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\212\036\213\040\uffcb\041\uffcb\045\uffcb\046" +
    "\uffcb\001\002\000\040\004\017\014\057\016\005\037\032" +
    "\056\027\063\054\064\012\065\016\066\053\067\060\070" +
    "\023\071\015\072\042\073\035\074\026\001\002\000\040" +
    "\004\017\014\057\016\005\037\032\056\027\063\054\064" +
    "\012\065\016\066\053\067\060\070\023\071\015\072\042" +
    "\073\035\074\026\001\002\000\060\002\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\011\uffc4\013\uffc4\015\uffc4\017\uffc4\020\167" +
    "\021\170\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\043\171\045\uffc4" +
    "\046\uffc4\001\002\000\060\002\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\013\uffc5\015\uffc5\017\uffc5\020\167\021\170" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\040\uffc5\041\uffc5\043\171\045\uffc5\046\uffc5" +
    "\001\002\000\052\002\uffcd\005\uffcd\006\uffcd\007\uffcd\011" +
    "\uffcd\013\uffcd\015\uffcd\017\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\212\036\213\040\uffcd\041" +
    "\uffcd\045\uffcd\046\uffcd\001\002\000\052\002\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\011\uffc8\013\uffc8\015\uffc8\017\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\212" +
    "\036\213\040\uffc8\041\uffc8\045\uffc8\046\uffc8\001\002\000" +
    "\052\002\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\013\uffc9" +
    "\015\uffc9\017\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\212\036\213\040\uffc9\041\uffc9\045\uffc9" +
    "\046\uffc9\001\002\000\052\002\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\011\uffcc\013\uffcc\015\uffcc\017\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\212\036\213\040" +
    "\uffcc\041\uffcc\045\uffcc\046\uffcc\001\002\000\052\002\uffca" +
    "\005\uffca\006\uffca\007\uffca\011\uffca\013\uffca\015\uffca\017" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\212\036\213\040\uffca\041\uffca\045\uffca\046\uffca\001" +
    "\002\000\040\004\017\014\057\016\005\037\032\056\027" +
    "\063\054\064\012\065\016\066\053\067\060\070\023\071" +
    "\015\072\042\073\035\074\026\001\002\000\066\002\uffba" +
    "\005\uffba\006\uffba\007\uffba\011\uffba\013\uffba\015\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\040\uffba\041\uffba\043\uffba\045\uffba\046\uffba\001\002" +
    "\000\006\041\071\045\226\001\002\000\120\002\uffc6\004" +
    "\017\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\051\013\uffc6" +
    "\014\057\015\uffc6\016\005\017\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6" +
    "\042\024\044\033\046\uffc6\047\014\050\022\053\056\055" +
    "\061\056\027\063\054\064\012\065\016\066\053\067\060" +
    "\070\023\071\015\072\042\073\035\074\026\001\002\000" +
    "\024\002\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\013\ufff1" +
    "\015\ufff1\017\ufff1\046\ufff1\001\002\000\024\002\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\015\ufff5\017\ufff5" +
    "\046\231\001\002\000\120\002\uffc6\004\017\005\uffc6\006" +
    "\uffc6\007\uffc6\011\uffc6\012\051\013\uffc6\014\057\015\uffc6" +
    "\016\005\017\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044\033" +
    "\046\uffc6\047\014\050\022\053\056\055\061\056\027\063" +
    "\054\064\012\065\016\066\053\067\060\070\023\071\015" +
    "\072\042\073\035\074\026\001\002\000\024\002\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\013\ufff0\015\ufff0\017\ufff0" +
    "\046\ufff0\001\002\000\024\002\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\011\ufff3\013\ufff3\015\ufff3\017\ufff3\046\ufff3\001\002" +
    "\000\070\002\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\013" +
    "\uffb8\015\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\043\uffb8" +
    "\045\uffb8\046\uffb8\001\002\000\036\004\017\014\057\016" +
    "\005\056\027\063\054\064\012\065\016\066\053\067\060" +
    "\070\023\071\015\072\042\073\035\074\026\001\002\000" +
    "\010\004\077\007\237\014\076\001\002\000\036\004\017" +
    "\014\057\016\005\056\027\063\054\064\012\065\016\066" +
    "\053\067\060\070\023\071\015\072\042\073\035\074\026" +
    "\001\002\000\010\004\077\005\241\014\076\001\002\000" +
    "\076\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\011\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\040" +
    "\uffa3\041\uffa3\043\uffa3\045\uffa3\046\uffa3\001\002\000\032" +
    "\002\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\013\uffcf\015" +
    "\uffcf\017\uffcf\040\uffcf\041\uffcf\045\uffcf\046\uffcf\001\002" +
    "\000\004\066\152\001\002\000\004\006\245\001\002\000" +
    "\056\004\017\006\uffc6\014\057\016\005\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\056\027\063" +
    "\054\064\012\065\016\066\053\067\060\070\023\071\015" +
    "\072\042\073\035\074\026\001\002\000\020\006\247\027" +
    "\207\030\204\031\210\032\203\033\205\034\206\001\002" +
    "\000\006\051\250\052\251\001\002\000\004\005\254\001" +
    "\002\000\004\005\252\001\002\000\126\002\uffc6\004\017" +
    "\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\051\013\uffc6\014" +
    "\057\015\uffc6\016\005\017\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042" +
    "\024\044\033\046\uffc6\047\014\050\022\053\056\054\062" +
    "\055\061\056\027\061\020\062\065\063\054\064\012\065" +
    "\016\066\053\067\060\070\023\071\015\072\042\073\035" +
    "\074\026\001\002\000\024\002\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\011\uffe8\013\uffe8\015\uffe8\017\uffe8\046\uffe8\001\002" +
    "\000\126\002\uffc6\004\017\005\uffc6\006\uffc6\007\uffc6\011" +
    "\uffc6\012\051\013\uffc6\014\057\015\uffc6\016\005\017\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037" +
    "\032\040\uffc6\041\uffc6\042\024\044\033\046\uffc6\047\014" +
    "\050\022\053\056\054\062\055\061\056\027\061\020\062" +
    "\065\063\054\064\012\065\016\066\053\067\060\070\023" +
    "\071\015\072\042\073\035\074\026\001\002\000\024\002" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\013\uffe9\015\uffe9" +
    "\017\uffe9\046\uffe9\001\002\000\100\004\017\005\uffc6\012" +
    "\051\014\057\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044" +
    "\033\047\014\050\022\053\056\055\061\056\027\063\054" +
    "\064\012\065\016\066\053\067\060\070\023\071\015\072" +
    "\042\073\035\074\026\001\002\000\004\005\260\001\002" +
    "\000\024\002\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\013" +
    "\ufff7\015\ufff7\017\ufff7\046\ufff7\001\002\000\006\005\267" +
    "\007\266\001\002\000\006\005\264\007\263\001\002\000" +
    "\102\004\017\005\uffc6\007\uffc6\012\051\014\057\016\005" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037" +
    "\032\040\uffc6\041\uffc6\042\024\044\033\047\014\050\022" +
    "\053\056\055\061\056\027\063\054\064\012\065\016\066" +
    "\053\067\060\070\023\071\015\072\042\073\035\074\026" +
    "\001\002\000\076\002\uffae\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\011\uffae\013\uffae\014\uffae\015\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\040\uffae\041\uffae\043\uffae\045\uffae\046\uffae\001" +
    "\002\000\006\005\uff9e\007\uff9e\001\002\000\102\004\017" +
    "\005\uffc6\007\uffc6\012\051\014\057\016\005\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040\uffc6" +
    "\041\uffc6\042\024\044\033\047\014\050\022\053\056\055" +
    "\061\056\027\063\054\064\012\065\016\066\053\067\060" +
    "\070\023\071\015\072\042\073\035\074\026\001\002\000" +
    "\076\002\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\011\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\040" +
    "\uffa0\041\uffa0\043\uffa0\045\uffa0\046\uffa0\001\002\000\006" +
    "\005\uff9f\007\uff9f\001\002\000\100\004\017\011\uffc6\012" +
    "\051\014\057\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\037\032\040\uffc6\041\uffc6\042\024\044" +
    "\033\047\014\050\022\053\056\055\061\056\027\063\054" +
    "\064\012\065\016\066\053\067\060\070\023\071\015\072" +
    "\042\073\035\074\026\001\002\000\006\007\uffd8\013\uffd8" +
    "\001\002\000\004\011\304\001\002\000\006\007\275\013" +
    "\276\001\002\000\102\004\017\011\uffc6\012\051\014\057" +
    "\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\037\032\040\uffc6\041\uffc6\042\024\044\033\046\300" +
    "\047\014\050\022\053\056\055\061\056\027\063\054\064" +
    "\012\065\016\066\053\067\060\070\023\071\015\072\042" +
    "\073\035\074\026\001\002\000\024\002\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb\046\uffdb" +
    "\001\002\000\006\007\uffd9\013\uffd9\001\002\000\004\011" +
    "\301\001\002\000\106\004\017\012\051\013\uffc6\014\057" +
    "\016\005\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\037\032\040\uffc6\041\uffc6\042\024\044\033\047\014" +
    "\050\022\053\056\054\062\055\061\056\027\061\020\062" +
    "\065\063\054\064\012\065\016\066\053\067\060\070\023" +
    "\071\015\072\042\073\035\074\026\001\002\000\004\013" +
    "\303\001\002\000\024\002\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\011\uffdc\013\uffdc\015\uffdc\017\uffdc\046\uffdc\001\002\000" +
    "\110\004\017\007\uffc6\012\051\013\uffc6\014\057\016\005" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037" +
    "\032\040\uffc6\041\uffc6\042\024\044\033\047\014\050\022" +
    "\053\056\054\062\055\061\056\027\061\020\062\065\063" +
    "\054\064\012\065\016\066\053\067\060\070\023\071\015" +
    "\072\042\073\035\074\026\001\002\000\006\007\uffda\013" +
    "\uffda\001\002\000\004\005\307\001\002\000\076\002\uff9a" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\011\uff9a\013\uff9a\014" +
    "\uff9a\015\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\040\uff9a\041\uff9a" +
    "\043\uff9a\045\uff9a\046\uff9a\001\002\000\006\007\uffa6\017" +
    "\uffa6\001\002\000\010\007\uffa4\011\316\017\uffa4\001\002" +
    "\000\006\007\313\017\314\001\002\000\104\004\017\007" +
    "\uffc6\011\uffc6\012\051\014\057\016\005\017\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\037\032\040" +
    "\uffc6\041\uffc6\042\024\044\033\047\014\050\022\053\056" +
    "\055\061\056\027\063\054\064\012\065\016\066\053\067" +
    "\060\070\023\071\015\072\042\073\035\074\026\001\002" +
    "\000\076\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\040\uffa9\041\uffa9\043\uffa9\045\uffa9\046\uffa9\001\002\000" +
    "\006\007\uffa7\017\uffa7\001\002\000\004\055\061\001\002" +
    "\000\006\007\uffa5\017\uffa5\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\072\002\054\003\003\004\007\005\065\006" +
    "\012\007\040\010\030\011\027\012\024\013\043\014\042" +
    "\015\063\022\005\025\035\032\067\033\047\034\046\035" +
    "\051\036\033\037\045\040\037\041\062\042\066\043\006" +
    "\044\010\046\044\047\020\050\036\001\001\000\002\001" +
    "\001\000\062\007\040\010\030\011\027\013\043\014\042" +
    "\015\063\020\311\021\307\022\005\025\035\032\067\033" +
    "\047\034\046\035\051\036\310\037\045\040\037\041\071" +
    "\042\066\043\006\044\010\046\044\047\020\050\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\007\040\010\030\011\027\013\043\014\042\015\063\022" +
    "\005\025\035\027\260\032\067\033\047\034\046\035\051" +
    "\036\261\037\045\040\037\041\071\042\066\043\006\044" +
    "\010\046\044\047\020\050\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\040\010\030\025\035\034\241\037\045\040\037" +
    "\041\071\042\066\043\006\046\044\047\020\050\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\040\010" +
    "\030\025\035\041\071\043\006\050\233\001\001\000\036" +
    "\007\040\010\030\025\035\032\224\033\047\034\046\037" +
    "\045\040\037\041\071\042\066\043\006\046\044\047\020" +
    "\050\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\002\054\004\162\005\065\006" +
    "\012\007\040\010\030\011\027\012\024\013\043\014\042" +
    "\015\063\022\005\025\035\032\067\033\047\034\046\035" +
    "\051\036\033\037\045\040\037\041\062\042\066\043\006" +
    "\044\010\046\044\047\020\050\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\007\040\010\030\011\027\013" +
    "\043\014\042\015\063\022\005\025\035\026\144\032\067" +
    "\033\047\034\046\035\051\036\100\037\045\040\037\041" +
    "\071\042\066\043\006\044\010\046\044\047\020\050\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\040\010\030\025\035\033\072\034\046\037\045" +
    "\040\037\041\071\042\066\043\006\046\044\047\020\050" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\040\010\030\025\035\034\074\037\045\040\037\041" +
    "\071\042\066\043\006\046\044\047\020\050\036\001\001" +
    "\000\002\001\001\000\056\007\040\010\030\011\027\013" +
    "\043\014\042\015\063\022\005\025\035\032\067\033\047" +
    "\034\046\035\051\036\104\037\045\040\037\041\071\042" +
    "\066\043\006\044\010\046\044\047\020\050\036\001\001" +
    "\000\060\007\040\010\030\011\027\013\043\014\042\015" +
    "\063\022\005\025\035\026\077\032\067\033\047\034\046" +
    "\035\051\036\100\037\045\040\037\041\071\042\066\043" +
    "\006\044\010\046\044\047\020\050\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\007\040\010\030\011" +
    "\027\013\043\014\042\015\063\022\005\025\035\032\067" +
    "\033\047\034\046\035\051\036\103\037\045\040\037\041" +
    "\071\042\066\043\006\044\010\046\044\047\020\050\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\007\040\010\030\011\027" +
    "\013\043\014\042\015\063\022\005\025\035\032\067\033" +
    "\047\034\046\035\051\036\107\037\045\040\037\041\071" +
    "\042\066\043\006\044\010\046\044\047\020\050\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\007\040" +
    "\010\030\011\027\013\043\014\042\015\063\022\005\025" +
    "\035\032\067\033\047\034\046\035\051\036\112\037\045" +
    "\040\037\041\071\042\066\043\006\044\010\046\044\047" +
    "\020\050\036\001\001\000\002\001\001\000\056\007\040" +
    "\010\030\011\027\013\043\014\042\015\063\022\005\025" +
    "\035\032\067\033\047\034\046\035\051\036\114\037\045" +
    "\040\037\041\071\042\066\043\006\044\010\046\044\047" +
    "\020\050\036\001\001\000\002\001\001\000\010\023\120" +
    "\024\122\045\123\001\001\000\066\002\054\005\117\006" +
    "\012\007\040\010\030\011\027\012\024\013\043\014\042" +
    "\015\063\022\005\025\035\032\067\033\047\034\046\035" +
    "\051\036\033\037\045\040\037\041\062\042\066\043\006" +
    "\044\010\046\044\047\020\050\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\002\054\005\136\006\012\007\040\010\030\011\027\012" +
    "\024\013\043\014\042\015\063\022\005\025\035\032\067" +
    "\033\047\034\046\035\051\036\033\037\045\040\037\041" +
    "\062\042\066\043\006\044\010\046\044\047\020\050\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\002" +
    "\054\005\135\006\012\007\040\010\030\011\027\012\024" +
    "\013\043\014\042\015\063\022\005\025\035\032\067\033" +
    "\047\034\046\035\051\036\033\037\045\040\037\041\062" +
    "\042\066\043\006\044\010\046\044\047\020\050\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\150\031\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\007\040\010\030\011\027" +
    "\013\043\014\042\015\063\022\005\025\035\032\067\033" +
    "\047\034\046\035\051\036\153\037\045\040\037\041\071" +
    "\042\066\043\006\044\010\046\044\047\020\050\036\001" +
    "\001\000\002\001\001\000\004\031\157\001\001\000\066" +
    "\002\054\005\156\006\012\007\040\010\030\011\027\012" +
    "\024\013\043\014\042\015\063\022\005\025\035\032\067" +
    "\033\047\034\046\035\051\036\033\037\045\040\037\041" +
    "\062\042\066\043\006\044\010\046\044\047\020\050\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\002\054\005\165\006\012\007\040\010\030\011" +
    "\027\012\024\013\043\014\042\015\063\022\005\025\035" +
    "\032\067\033\047\034\046\035\051\036\033\037\045\040" +
    "\037\041\062\042\066\043\006\044\010\046\044\047\020" +
    "\050\036\001\001\000\002\001\001\000\022\007\040\010" +
    "\030\025\035\040\201\041\071\042\066\043\006\050\036" +
    "\001\001\000\022\007\040\010\030\025\035\040\200\041" +
    "\071\042\066\043\006\050\036\001\001\000\022\007\040" +
    "\010\030\025\035\040\171\041\071\042\066\043\006\050" +
    "\036\001\001\000\002\001\001\000\020\007\040\010\030" +
    "\025\035\041\071\042\177\043\006\050\036\001\001\000" +
    "\020\007\040\010\030\025\035\041\071\042\176\043\006" +
    "\050\036\001\001\000\020\007\040\010\030\025\035\041" +
    "\071\042\175\043\006\050\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\040\010\030\025\035\037\045" +
    "\040\037\041\071\042\066\043\006\047\221\050\036\001" +
    "\001\000\026\007\040\010\030\025\035\037\045\040\037" +
    "\041\071\042\066\043\006\047\220\050\036\001\001\000" +
    "\026\007\040\010\030\025\035\037\045\040\037\041\071" +
    "\042\066\043\006\047\217\050\036\001\001\000\026\007" +
    "\040\010\030\025\035\037\045\040\037\041\071\042\066" +
    "\043\006\047\216\050\036\001\001\000\026\007\040\010" +
    "\030\025\035\037\045\040\037\041\071\042\066\043\006" +
    "\047\215\050\036\001\001\000\026\007\040\010\030\025" +
    "\035\037\045\040\037\041\071\042\066\043\006\047\210" +
    "\050\036\001\001\000\002\001\001\000\024\007\040\010" +
    "\030\025\035\037\214\040\037\041\071\042\066\043\006" +
    "\050\036\001\001\000\024\007\040\010\030\025\035\037" +
    "\213\040\037\041\071\042\066\043\006\050\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\040\010\030\025\035\041\071\042" +
    "\223\043\006\050\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\007\040\010\030\011\027\013\227\014" +
    "\042\015\063\022\005\025\035\032\067\033\047\034\046" +
    "\035\051\036\226\037\045\040\037\041\071\042\066\043" +
    "\006\044\010\046\044\047\020\050\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\007\040\010\030\011" +
    "\027\013\232\014\231\015\063\022\005\025\035\032\067" +
    "\033\047\034\046\035\051\037\045\040\037\041\071\042" +
    "\066\043\006\044\010\046\044\047\020\050\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\040\010\030\025\035\041\235\043\006\001\001" +
    "\000\002\001\001\000\014\007\040\010\030\025\035\041" +
    "\237\043\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\243\001\001\000\002\001" +
    "\001\000\030\007\040\010\030\025\035\037\045\040\037" +
    "\041\071\042\066\043\006\046\245\047\020\050\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\002\054\005\252\006\012\007" +
    "\040\010\030\011\027\012\024\013\043\014\042\015\063" +
    "\022\005\025\035\032\067\033\047\034\046\035\051\036" +
    "\033\037\045\040\037\041\062\042\066\043\006\044\010" +
    "\046\044\047\020\050\036\001\001\000\002\001\001\000" +
    "\066\002\054\005\254\006\012\007\040\010\030\011\027" +
    "\012\024\013\043\014\042\015\063\022\005\025\035\032" +
    "\067\033\047\034\046\035\051\036\033\037\045\040\037" +
    "\041\062\042\066\043\006\044\010\046\044\047\020\050" +
    "\036\001\001\000\002\001\001\000\056\007\040\010\030" +
    "\011\027\013\043\014\042\015\063\022\005\025\035\032" +
    "\067\033\047\034\046\035\051\036\256\037\045\040\037" +
    "\041\071\042\066\043\006\044\010\046\044\047\020\050" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\007\040\010\030\011" +
    "\027\013\043\014\042\015\063\022\005\025\035\032\067" +
    "\033\047\034\046\035\051\036\264\037\045\040\037\041" +
    "\071\042\066\043\006\044\010\046\044\047\020\050\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\040\010\030\011\027\013\043\014\042\015\063\022\005" +
    "\025\035\032\067\033\047\034\046\035\051\036\267\037" +
    "\045\040\037\041\071\042\066\043\006\044\010\046\044" +
    "\047\020\050\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\007\040\010\030\011\027\013\043\014\042" +
    "\015\063\016\271\017\273\022\005\025\035\032\067\033" +
    "\047\034\046\035\051\036\272\037\045\040\037\041\071" +
    "\042\066\043\006\044\010\046\044\047\020\050\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\007\040\010\030\011\027\013\043\014\042\015" +
    "\063\016\276\022\005\025\035\032\067\033\047\034\046" +
    "\035\051\036\272\037\045\040\037\041\071\042\066\043" +
    "\006\044\010\046\044\047\020\050\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\002" +
    "\054\005\301\006\012\007\040\010\030\011\027\012\024" +
    "\013\043\014\042\015\063\022\005\025\035\032\067\033" +
    "\047\034\046\035\051\036\033\037\045\040\037\041\062" +
    "\042\066\043\006\044\010\046\044\047\020\050\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\002\054" +
    "\005\304\006\012\007\040\010\030\011\027\012\024\013" +
    "\043\014\042\015\063\022\005\025\035\032\067\033\047" +
    "\034\046\035\051\036\033\037\045\040\037\041\062\042" +
    "\066\043\006\044\010\046\044\047\020\050\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\007\040\010\030\011\027\013\043\014\042\015\063\021" +
    "\314\022\005\025\035\032\067\033\047\034\046\035\051" +
    "\036\310\037\045\040\037\041\071\042\066\043\006\044" +
    "\010\046\044\047\020\050\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\316\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		//SmplLexer lexer;

		//InputStreamReader in = null;

		//public SmplParser(InputStream is) {
	     //   	in = new InputStreamReader(is);
		//}

		//public void report_error(String message, Object info) {
		 //   System.err.println(message);
		//}
        SmplLexer lexer = (SmplLexer) getScanner();
		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // read ::= READINT LPAREN RPAREN 
            {
              Read RESULT =null;
		 RESULT = new Read("int"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // read ::= READ LPAREN RPAREN 
            {
              Read RESULT =null;
		 RESULT = new Read("string"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // argList ::= expression 
            {
              ArrayList<IRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<IRExp> lst = new ArrayList<>(); lst.add(e); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // argList ::= argList COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 alst.add(e); RESULT = alst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // List ::= expression COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e1 = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<IRExp> lst = new ArrayList<>(); lst.add(e1); lst.add(e); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("List",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // List ::= List COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 alst.add(e); RESULT = alst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("List",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // multiExp ::= LPAREN List RPAREN 
            {
              IRExpMultiExp RESULT =null;
		int multiexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int multiexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> multiexplst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpMultiExp(multiexplst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("multiExp",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // callProc ::= LBRAK argList RBRAK 
            {
              IRExp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallShort(new IRExpVar("list"), alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // callProc ::= factor LPAREN argList RPAREN 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallShort(f,alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // callProc ::= CALL LPAREN factor COMMA factor RPAREN 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp alst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallFull(f, alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // spec ::= expression 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		  RESULT = new Specification(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("spec",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // spec ::= expression COLN procExp 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpProc p = (IRExpProc)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Specification(e,p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("spec",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // specLst ::= spec 
            {
              ArrayList<Specification> RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Specification sp = (Specification)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<Specification> lst = new ArrayList<>(); lst.add(sp); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("specLst",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // specLst ::= specLst COMMA spec 
            {
              ArrayList<Specification> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Specification> slst = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Specification sp = (Specification)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 slst.add(sp); RESULT = slst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("specLst",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unique ::= factor LBRAK expression RBRAK 
            {
              IRExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp v = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpGetIndex(v, n);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("unique",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unique ::= LVEC specLst RVEC 
            {
              IRExp RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Specification> slst = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpVector(slst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("unique",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= callProc 
            {
              IRExp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp call = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = call; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= read 
            {
              IRExp RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Read rs = (Read)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = rs; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= unique 
            {
              IRExp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp u = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = u; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= multiExp 
            {
              IRExp RESULT =null;
		int multiexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int multiexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpMultiExp multiexplst = (IRExpMultiExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = multiexplst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= LPAREN expression RPAREN 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= NIL 
            {
              IRExp RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String nil = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= VARIABLE 
            {
              IRExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= FALS 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(false); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= TRU 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(true); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= CHARACTER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Character ilit = (Character)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= STRING 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= DOUBLE 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= INTEGER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // negat ::= factor 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("negat",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // negat ::= BNOT negat 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBnot(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("negat",38, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exponent ::= negat 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("exponent",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exponent ::= negat EXPT exponent 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpExpt(n,expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("exponent",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term ::= exponent 
            {
              IRExp RESULT =null;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = expt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term ::= term MOD exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpMod(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term ::= term DIV exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpDiv(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term MUL exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
        RESULT = new IRExpMul(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithExp ::= term 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arithExp ::= arithExp MINUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpSub(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arithExp ::= arithExp CAT term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
                RESULT = new IRExpCat(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arithExp ::= arithExp PLUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpAdd(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bitWiseExp ::= arithExp 
            {
              IRExp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ae; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",37, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bitWiseExp ::= bitWiseExp BOR arithExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBor(be, ae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",37, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bitWiseExp ::= bitWiseExp BAND arithExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBand(be, ae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",37, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relatExp ::= 
            {
              IRExp RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relatExp ::= bitWiseExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = be; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relatExp ::= relatExp NQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpNqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relatExp ::= relatExp LQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relatExp ::= relatExp GQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relatExp ::= relatExp LST bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLst(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relatExp ::= relatExp GRT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGrt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relatExp ::= relatExp EQV bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpEqv(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",36, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logicNotExp ::= relatExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = re; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNotExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logicNotExp ::= NOT logicNotExp 
            {
              IRExp RESULT =null;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLN(lne); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNotExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logicAndExp ::= logicNotExp 
            {
              IRExp RESULT =null;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = lne; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAndExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logicAndExp ::= logicAndExp AND logicNotExp 
            {
              IRExp RESULT =null;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLA(lae,lne); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAndExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logicOrExp ::= logicAndExp 
            {
              IRExp RESULT =null;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = lae ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicOrExp",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logicOrExp ::= logicOrExp OR logicAndExp 
            {
              IRExp RESULT =null;
		int loeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int loeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp loe = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLO(loe,lae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicOrExp",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binding ::= VARIABLE EQV expression 
            {
              Binding RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Binding(id, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bindingList ::= binding 
            {
              BindingList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new BindingList(b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingList",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bindingList ::= bindingList COMMA binding 
            {
              BindingList RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		BindingList blst = (BindingList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 blst.add(b); RESULT = blst;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingList",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // letExp ::= LET LPAREN bindingList RPAREN stmt 
            {
              IRExpLet RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		BindingList blst = (BindingList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLet(blst, body); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letExp",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // clauseLst ::= clause 
            {
              ArrayList<Clause> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<Clause> lst = new ArrayList<>(); lst.add(c); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("clauseLst",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // clauseLst ::= clauseLst COMMA clause 
            {
              ArrayList<Clause> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Clause> lst = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 lst.add(c); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("clauseLst",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // clause ::= expression COLN stmt 
            {
              Clause RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp p = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Clause(p,new ExprStmt(c)); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("clause",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // caseExp ::= CASE LBRACE clauseLst RBRACE 
            {
              IRExpCase RESULT =null;
		int clstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int clstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Clause> clst = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpCase(clst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("caseExp",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // caseExp ::= CASE LBRACE clauseLst COMMA ELSE COLN stmt RBRACE 
            {
              IRExpCase RESULT =null;
		int clstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).left;
		int clstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).right;
		ArrayList<Clause> clst = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpCase(clst,new ExprStmt(e)); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("caseExp",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramListNE ::= VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("norm", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramListNE ::= REF VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("ref", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramListNE ::= LAZY VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("lazy", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramListNE ::= paramList COMMA VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("norm", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramListNE ::= paramList COMMA REF VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("ref", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramListNE ::= paramList COMMA LAZY VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("lazy", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramList ::= empty 
            {
              ParamLst RESULT =null;
		 RESULT = new ParamLst(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramList ::= paramListNE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procExp ::= PROC VARIABLE stmt 
            {
              IRExpProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ParamLst lst = new ParamLst("norm", id); RESULT = new IRExpProc(lst, body, "any"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procExp ::= PROC LPAREN paramList DOT VARIABLE RPAREN stmt 
            {
              IRExpProc RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int prestleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int prestright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String prest = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("norm",prest); RESULT = new IRExpProc(plst, body, "least") ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procExp ::= PROC LPAREN paramList RPAREN stmt 
            {
              IRExpProc RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpProc(plst, body, "fixed") ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // forExp ::= FOR LPAREN binding SEMI relatExp SEMI DCR RPAREN stmt 
            {
              IRExpFor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpFor(b,re,c,body); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("forExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-8)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // forExp ::= FOR LPAREN binding SEMI relatExp SEMI ICR RPAREN stmt 
            {
              IRExpFor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpFor(b,re,c,body); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("forExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-8)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // others ::= caseExp 
            {
              IRExp RESULT =null;
		int caseexpleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int caseexpright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpCase caseexp = (IRExpCase)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = caseexp; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("others",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // others ::= forExp 
            {
              IRExp RESULT =null;
		int forexpleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int forexpright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpFor forexp = (IRExpFor)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = forexp; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("others",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // others ::= procExp 
            {
              IRExp RESULT =null;
		int procstmtleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int procstmtright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpProc procstmt = (IRExpProc)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = procstmt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("others",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // others ::= LBRACE stmtList RBRACE 
            {
              IRExp RESULT =null;
		int compexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int compexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence compexplst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpCompExp(compexplst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("others",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // others ::= letExp 
            {
              IRExp RESULT =null;
		int ltstmtleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ltstmtright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpLet ltstmt = (IRExpLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ltstmt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("others",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // others ::= logicOrExp 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("others",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ifExp2 ::= IF logicOrExp THEN ifExp1 ELSE ifExp2 
            {
              IRExp RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		IRExp pred = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int thenClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int thenClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp thenClause = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int elseClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp elseClause = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpIf(pred,thenClause, elseClause); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ifExp2",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ifExp2 ::= IF logicOrExp THEN expression 
            {
              IRExp RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp pred = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int thenClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int thenClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp thenClause = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpIf(pred, thenClause); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ifExp2",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ifExp1 ::= others 
            {
              IRExp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp o = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ifExp1",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ifExp1 ::= IF logicOrExp THEN ifExp1 ELSE ifExp1 
            {
              IRExp RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		IRExp pred = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int thenClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int thenClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp thenClause = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int elseClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp elseClause = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpIf(pred,thenClause, elseClause); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ifExp1",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= ifExp2 
            {
              IRExp RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ifexp = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ifexp; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= ifExp1 
            {
              IRExp RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ifexp = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ifexp; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // printStmt ::= PRINT LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StmtPrint(e, "regular"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("printStmt",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // printStmt ::= PRINTLN LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StmtPrint(e, "line"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("printStmt",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defStmt ::= DEF VARIABLE expression 
            {
              StmtDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDef(id, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("defStmt",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= factor ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vlstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vlstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp vlst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp alst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDefinition(vlst, alst);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtExpr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= printStmt 
            {
              Statement RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtPrint ps = (StmtPrint)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ps; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= defStmt 
            {
              Statement RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDef ds = (StmtDef)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ds; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList SEMI stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		lst.add(s);
		RESULT = lst;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

