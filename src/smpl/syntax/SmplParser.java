
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 27 16:31:55 EST 2018
//----------------------------------------------------

package smpl.syntax;

import smpl.semantics.*;
import smpl.values.*;
import smpl.syntax.IRExpProc.*;
import smpl.builtIn_necessities.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 27 16:31:55 EST 2018
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\011\005\000\002\002\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\015\007\000\002\015\011\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\017\006\000" +
    "\002\017\005\000\002\017\004\000\002\017\003\000\002" +
    "\012\010\000\002\010\007\000\002\023\005\000\002\023" +
    "\003\000\002\024\005\000\002\037\005\000\002\037\003" +
    "\000\002\040\005\000\002\040\003\000\002\041\004\000" +
    "\002\041\003\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\034\002\000\002\035\005" +
    "\000\002\035\005\000\002\035\003\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\031\005\000\002\031\003\000\002\036\004" +
    "\000\002\036\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\032\005\000\002\032\006\000\002\013\005\000\002" +
    "\013\003\000\002\014\005\000\002\014\003\000\002\020" +
    "\010\000\002\020\006\000\002\020\005\000\002\007\005" +
    "\000\002\022\005\000\002\022\005\000\002\021\005\000" +
    "\002\021\003\000\002\033\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\104\002\uffd6\004\016\006\uffd6\012\042\014" +
    "\047\016\005\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\037\027\040\uffd6\041\uffd6\042\023\044\030\047" +
    "\046\050\054\051\052\052\025\054\017\055\014\056\045" +
    "\057\053\060\012\061\051\062\021\063\056\064\013\065" +
    "\037\066\032\067\024\001\002\000\004\002\242\001\002" +
    "\000\102\004\016\007\uffd6\011\uffd6\012\042\014\047\016" +
    "\005\017\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\037\027\040\uffd6\041\uffd6\042\023\044\030\047" +
    "\046\051\052\052\025\055\014\056\045\057\053\060\012" +
    "\061\051\062\021\063\056\064\013\065\037\066\032\067" +
    "\024\001\002\000\024\002\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\011\ufff3\013\ufff3\015\ufff3\017\ufff3\046\ufff3\001\002\000" +
    "\076\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\040" +
    "\uffb9\041\uffb9\043\uffb9\045\uffb9\046\uffb9\001\002\000\006" +
    "\002\001\006\144\001\002\000\024\002\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\011\ufffd\013\ufffd\015\ufffd\017\ufffd\046\ufffd" +
    "\001\002\000\076\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\040\uffc4\041\uffc4\043\uffc4\045\uffc4\046\uffc4\001" +
    "\002\000\076\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\011\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\040\uffc3\041\uffc3\043\uffc3\045\uffc3\046\uffc3\001\002" +
    "\000\076\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\040\uffc6\041\uffc6\043\uffc6\045\uffc6\046\uffc6\001\002\000" +
    "\024\002\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\013\ufffb" +
    "\015\ufffb\017\ufffb\046\ufffb\001\002\000\100\004\016\005" +
    "\uffd6\007\uffd6\012\042\014\047\016\005\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041" +
    "\uffd6\042\023\044\030\047\046\051\052\052\025\055\014" +
    "\056\045\057\053\060\012\061\051\062\021\063\056\064" +
    "\013\065\037\066\032\067\024\001\002\000\116\002\uffd6" +
    "\004\016\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\042\013" +
    "\uffd6\014\047\015\uffd6\016\005\017\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041" +
    "\uffd6\042\023\044\030\046\uffd6\047\046\051\052\052\025" +
    "\055\014\056\045\057\053\060\012\061\051\062\021\063" +
    "\056\064\013\065\037\066\032\067\024\001\002\000\052" +
    "\002\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\013\uffd7\015" +
    "\uffd7\017\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\172\036\173\040\uffd7\041\uffd7\045\uffd7\046" +
    "\uffd7\001\002\000\076\002\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\040\uffc1\041\uffc1\043\uffc1\045\uffc1\046\uffc1" +
    "\001\002\000\024\002\ufffc\005\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\013\ufffc\015\ufffc\017\ufffc\046\ufffc\001\002\000\110" +
    "\002\uffd6\004\016\005\uffd6\006\uffd6\007\uffd6\011\uffd6\013" +
    "\uffd6\014\047\015\uffd6\016\005\017\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041" +
    "\uffd6\042\023\045\uffd6\046\uffd6\052\025\055\014\056\045" +
    "\057\053\060\012\061\051\062\021\063\056\064\013\065" +
    "\037\066\032\067\024\001\002\000\076\002\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\011\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc\043\uffbc" +
    "\045\uffbc\046\uffbc\001\002\000\004\004\213\001\002\000" +
    "\024\002\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5" +
    "\015\ufff5\017\ufff5\046\ufff5\001\002\000\042\004\016\014" +
    "\047\016\005\037\027\052\025\055\014\056\045\057\053" +
    "\060\012\061\051\062\021\063\056\064\013\065\037\066" +
    "\032\067\024\001\002\000\066\004\016\014\047\016\005" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037" +
    "\027\040\uffd6\041\uffd6\042\023\045\uffd6\052\025\055\014" +
    "\056\045\057\053\060\012\061\051\062\021\063\056\064" +
    "\013\065\037\066\032\067\024\001\002\000\024\002\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\011\ufffa\013\ufffa\015\ufffa\017" +
    "\ufffa\046\ufffa\001\002\000\076\002\uffbe\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\040\uffbe\041\uffbe\043\uffbe\045\uffbe" +
    "\046\uffbe\001\002\000\076\002\uffb8\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\011\uffb8\013\uffb8\014\uffb8\015\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\040\uffb8\041\uffb8\043\uffb8\045\uffb8\046" +
    "\uffb8\001\002\000\070\002\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\013\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\203\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9\041" +
    "\uffc9\043\uffc9\045\uffc9\046\uffc9\001\002\000\066\002\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\011\uffcf\013\uffcf\015\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\154\023\155\024\153\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\040\uffcf\041\uffcf\043\uffcf\045\uffcf\046\uffcf\001\002" +
    "\000\076\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\011" +
    "\uffba\013\uffba\014\uffba\015\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\040\uffba\041\uffba\043\uffba\045\uffba\046\uffba\001\002\000" +
    "\076\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040" +
    "\uffbf\041\uffbf\043\uffbf\045\uffbf\046\uffbf\001\002\000\046" +
    "\002\uffde\005\uffde\006\uffde\007\uffde\011\uffde\013\uffde\015" +
    "\uffde\017\uffde\027\167\030\164\031\170\032\163\033\165" +
    "\034\166\040\uffde\041\uffde\045\uffde\046\uffde\001\002\000" +
    "\060\002\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\013\uffd3" +
    "\015\uffd3\017\uffd3\020\147\021\150\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3" +
    "\041\uffd3\043\151\045\uffd3\046\uffd3\001\002\000\104\004" +
    "\016\006\uffd6\012\042\013\uffd6\014\047\016\005\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040" +
    "\uffd6\041\uffd6\042\023\044\030\047\046\050\054\051\052" +
    "\052\025\054\017\055\014\056\045\057\053\060\012\061" +
    "\051\062\021\063\056\064\013\065\037\066\032\067\024" +
    "\001\002\000\032\002\uffe2\005\uffe2\006\uffe2\007\uffe2\011" +
    "\uffe2\013\uffe2\015\uffe2\017\uffe2\040\065\041\uffe2\045\uffe2" +
    "\046\uffe2\001\002\000\032\002\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\011\uffe0\013\uffe0\015\uffe0\017\uffe0\040\uffe0\041\uffe0" +
    "\045\uffe0\046\uffe0\001\002\000\076\002\uffbd\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd\043\uffbd\045" +
    "\uffbd\046\uffbd\001\002\000\004\004\131\001\002\000\100" +
    "\004\016\007\uffd6\012\042\014\047\015\uffd6\016\005\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027" +
    "\040\uffd6\041\uffd6\042\023\044\030\047\046\051\052\052" +
    "\025\055\014\056\045\057\053\060\012\061\051\062\021" +
    "\063\056\064\013\065\037\066\032\067\024\001\002\000" +
    "\024\002\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2" +
    "\015\ufff2\017\ufff2\046\ufff2\001\002\000\076\002\uffc2\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\011\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2\041\uffc2\043" +
    "\uffc2\045\uffc2\046\uffc2\001\002\000\006\004\104\056\105" +
    "\001\002\000\076\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\040\uffc5\041\uffc5\043\uffc5\045\uffc5\046\uffc5\001" +
    "\002\000\004\056\102\001\002\000\074\002\uffc7\004\070" +
    "\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013\uffc7\014\067\015" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\100\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\041\uffc7\043\uffc7" +
    "\046\uffc7\001\002\000\076\002\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\040\uffc0\041\uffc0\043\uffc0\045\uffc0\046" +
    "\uffc0\001\002\000\066\002\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb\043" +
    "\uffcb\045\uffcb\046\uffcb\001\002\000\010\002\ufffe\006\ufffe" +
    "\013\ufffe\001\002\000\026\002\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\011\ufff6\013\ufff6\015\ufff6\017\ufff6\041\062\046\ufff6" +
    "\001\002\000\110\002\uffd6\004\016\005\uffd6\006\uffd6\007" +
    "\uffd6\011\uffd6\013\uffd6\014\047\015\uffd6\016\005\017\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037" +
    "\027\040\uffd6\041\uffd6\042\023\045\uffd6\046\uffd6\052\025" +
    "\055\014\056\045\057\053\060\012\061\051\062\021\063" +
    "\056\064\013\065\037\066\032\067\024\001\002\000\074" +
    "\002\uffc7\004\070\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013" +
    "\uffc7\014\067\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\041\uffc7" +
    "\043\uffc7\045\uffc7\046\uffc7\001\002\000\032\002\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\011\uffe3\013\uffe3\015\uffe3\017\uffe3" +
    "\040\065\041\uffe3\045\uffe3\046\uffe3\001\002\000\110\002" +
    "\uffd6\004\016\005\uffd6\006\uffd6\007\uffd6\011\uffd6\013\uffd6" +
    "\014\047\015\uffd6\016\005\017\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041\uffd6" +
    "\042\023\045\uffd6\046\uffd6\052\025\055\014\056\045\057" +
    "\053\060\012\061\051\062\021\063\056\064\013\065\037" +
    "\066\032\067\024\001\002\000\032\002\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\013\uffe1\015\uffe1\017\uffe1\040\uffe1" +
    "\041\uffe1\045\uffe1\046\uffe1\001\002\000\040\004\016\014" +
    "\047\016\005\052\025\055\014\056\045\057\053\060\012" +
    "\061\051\062\021\063\056\064\013\065\037\066\032\067" +
    "\024\001\002\000\100\004\016\005\uffd6\007\uffd6\012\042" +
    "\014\047\016\005\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\037\027\040\uffd6\041\uffd6\042\023\044\030" +
    "\047\046\051\052\052\025\055\014\056\045\057\053\060" +
    "\012\061\051\062\021\063\056\064\013\065\037\066\032" +
    "\067\024\001\002\000\006\005\074\007\073\001\002\000" +
    "\010\005\uffaa\007\uffaa\015\uffaa\001\002\000\102\004\016" +
    "\005\uffd6\007\uffd6\012\042\014\047\015\uffd6\016\005\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027" +
    "\040\uffd6\041\uffd6\042\023\044\030\047\046\051\052\052" +
    "\025\055\014\056\045\057\053\060\012\061\051\062\021" +
    "\063\056\064\013\065\037\066\032\067\024\001\002\000" +
    "\076\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040" +
    "\uffb0\041\uffb0\043\uffb0\045\uffb0\046\uffb0\001\002\000\010" +
    "\005\uffab\007\uffab\015\uffab\001\002\000\010\004\070\014" +
    "\067\015\077\001\002\000\076\002\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\043\uffb6\045\uffb6" +
    "\046\uffb6\001\002\000\116\002\uffd6\004\016\005\uffd6\006" +
    "\uffd6\007\uffd6\011\uffd6\012\042\013\uffd6\014\047\015\uffd6" +
    "\016\005\017\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\037\027\040\uffd6\041\uffd6\042\023\044\030" +
    "\046\uffd6\047\046\051\052\052\025\055\014\056\045\057" +
    "\053\060\012\061\051\062\021\063\056\064\013\065\037" +
    "\066\032\067\024\001\002\000\024\002\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\013\ufff9\015\ufff9\017\ufff9\046\ufff9" +
    "\001\002\000\116\002\uffd6\004\016\005\uffd6\006\uffd6\007" +
    "\uffd6\011\uffd6\012\042\013\uffd6\014\047\015\uffd6\016\005" +
    "\017\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\037\027\040\uffd6\041\uffd6\042\023\044\030\046\uffd6" +
    "\047\046\051\052\052\025\055\014\056\045\057\053\060" +
    "\012\061\051\062\021\063\056\064\013\065\037\066\032" +
    "\067\024\001\002\000\024\002\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\011\ufff8\013\ufff8\015\ufff8\017\ufff8\046\ufff8\001\002" +
    "\000\014\005\uffa9\007\uffa9\010\uffa9\053\112\056\113\001" +
    "\002\000\122\002\uffd6\004\016\005\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\012\042\013\uffd6\014\047\015\uffd6\016\005\017" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\037\027\040\uffd6\041\uffd6\042\023\044\030\046\uffd6\047" +
    "\046\050\054\051\052\052\025\054\017\055\014\056\045" +
    "\057\053\060\012\061\051\062\021\063\056\064\013\065" +
    "\037\066\032\067\024\001\002\000\024\002\uffef\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\013\uffef\015\uffef\017\uffef\046" +
    "\uffef\001\002\000\010\005\116\007\115\010\117\001\002" +
    "\000\010\005\uffee\007\uffee\010\uffee\001\002\000\010\005" +
    "\uffed\007\uffed\010\uffed\001\002\000\004\056\114\001\002" +
    "\000\010\005\uffe9\007\uffe9\010\uffe9\001\002\000\010\005" +
    "\uffea\007\uffea\010\uffea\001\002\000\006\053\124\056\125" +
    "\001\002\000\122\002\uffd6\004\016\005\uffd6\006\uffd6\007" +
    "\uffd6\011\uffd6\012\042\013\uffd6\014\047\015\uffd6\016\005" +
    "\017\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\037\027\040\uffd6\041\uffd6\042\023\044\030\046\uffd6" +
    "\047\046\050\054\051\052\052\025\054\017\055\014\056" +
    "\045\057\053\060\012\061\051\062\021\063\056\064\013" +
    "\065\037\066\032\067\024\001\002\000\004\056\120\001" +
    "\002\000\004\005\121\001\002\000\122\002\uffd6\004\016" +
    "\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\042\013\uffd6\014" +
    "\047\015\uffd6\016\005\017\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041\uffd6\042" +
    "\023\044\030\046\uffd6\047\046\050\054\051\052\052\025" +
    "\054\017\055\014\056\045\057\053\060\012\061\051\062" +
    "\021\063\056\064\013\065\037\066\032\067\024\001\002" +
    "\000\024\002\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\013" +
    "\ufff0\015\ufff0\017\ufff0\046\ufff0\001\002\000\024\002\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\011\ufff1\013\ufff1\015\ufff1\017" +
    "\ufff1\046\ufff1\001\002\000\004\056\126\001\002\000\010" +
    "\005\uffeb\007\uffeb\010\uffeb\001\002\000\010\005\uffec\007" +
    "\uffec\010\uffec\001\002\000\006\007\073\015\130\001\002" +
    "\000\076\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\040\uffaf\041\uffaf\043\uffaf\045\uffaf\046\uffaf\001\002\000" +
    "\004\056\134\001\002\000\006\005\uffe5\007\uffe5\001\002" +
    "\000\006\005\140\007\137\001\002\000\004\027\135\001" +
    "\002\000\100\004\016\005\uffd6\007\uffd6\012\042\014\047" +
    "\016\005\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\037\027\040\uffd6\041\uffd6\042\023\044\030\047\046" +
    "\051\052\052\025\055\014\056\045\057\053\060\012\061" +
    "\051\062\021\063\056\064\013\065\037\066\032\067\024" +
    "\001\002\000\006\005\uffe4\007\uffe4\001\002\000\004\056" +
    "\134\001\002\000\122\002\uffd6\004\016\005\uffd6\006\uffd6" +
    "\007\uffd6\011\uffd6\012\042\013\uffd6\014\047\015\uffd6\016" +
    "\005\017\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\037\027\040\uffd6\041\uffd6\042\023\044\030\046" +
    "\uffd6\047\046\050\054\051\052\052\025\054\017\055\014" +
    "\056\045\057\053\060\012\061\051\062\021\063\056\064" +
    "\013\065\037\066\032\067\024\001\002\000\024\002\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017" +
    "\uffe7\046\uffe7\001\002\000\006\005\uffe6\007\uffe6\001\002" +
    "\000\006\006\144\013\145\001\002\000\106\002\uffd6\004" +
    "\016\006\uffd6\012\042\013\uffd6\014\047\016\005\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040" +
    "\uffd6\041\uffd6\042\023\044\030\047\046\050\054\051\052" +
    "\052\025\054\017\055\014\056\045\057\053\060\012\061" +
    "\051\062\021\063\056\064\013\065\037\066\032\067\024" +
    "\001\002\000\024\002\ufff4\005\ufff4\006\ufff4\007\ufff4\011" +
    "\ufff4\013\ufff4\015\ufff4\017\ufff4\046\ufff4\001\002\000\010" +
    "\002\uffff\006\uffff\013\uffff\001\002\000\042\004\016\014" +
    "\047\016\005\037\027\052\025\055\014\056\045\057\053" +
    "\060\012\061\051\062\021\063\056\064\013\065\037\066" +
    "\032\067\024\001\002\000\042\004\016\014\047\016\005" +
    "\037\027\052\025\055\014\056\045\057\053\060\012\061" +
    "\051\062\021\063\056\064\013\065\037\066\032\067\024" +
    "\001\002\000\042\004\016\014\047\016\005\037\027\052" +
    "\025\055\014\056\045\057\053\060\012\061\051\062\021" +
    "\063\056\064\013\065\037\066\032\067\024\001\002\000" +
    "\066\002\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\013\uffd1" +
    "\015\uffd1\017\uffd1\020\uffd1\021\uffd1\022\154\023\155\024" +
    "\153\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\040\uffd1\041\uffd1\043\uffd1\045\uffd1\046" +
    "\uffd1\001\002\000\042\004\016\014\047\016\005\037\027" +
    "\052\025\055\014\056\045\057\053\060\012\061\051\062" +
    "\021\063\056\064\013\065\037\066\032\067\024\001\002" +
    "\000\042\004\016\014\047\016\005\037\027\052\025\055" +
    "\014\056\045\057\053\060\012\061\051\062\021\063\056" +
    "\064\013\065\037\066\032\067\024\001\002\000\042\004" +
    "\016\014\047\016\005\037\027\052\025\055\014\056\045" +
    "\057\053\060\012\061\051\062\021\063\056\064\013\065" +
    "\037\066\032\067\024\001\002\000\066\002\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\011\uffcd\013\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040" +
    "\uffcd\041\uffcd\043\uffcd\045\uffcd\046\uffcd\001\002\000\066" +
    "\002\uffce\005\uffce\006\uffce\007\uffce\011\uffce\013\uffce\015" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\040\uffce\041\uffce\043\uffce\045\uffce\046\uffce" +
    "\001\002\000\066\002\uffcc\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\013\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\043\uffcc" +
    "\045\uffcc\046\uffcc\001\002\000\066\002\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\011\uffd0\013\uffd0\015\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\154\023\155\024\153\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0" +
    "\041\uffd0\043\uffd0\045\uffd0\046\uffd0\001\002\000\066\002" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\013\uffd2\015\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\154\023\155\024\153\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\040\uffd2\041\uffd2\043\uffd2\045\uffd2\046\uffd2\001" +
    "\002\000\042\004\016\014\047\016\005\037\027\052\025" +
    "\055\014\056\045\057\053\060\012\061\051\062\021\063" +
    "\056\064\013\065\037\066\032\067\024\001\002\000\042" +
    "\004\016\014\047\016\005\037\027\052\025\055\014\056" +
    "\045\057\053\060\012\061\051\062\021\063\056\064\013" +
    "\065\037\066\032\067\024\001\002\000\042\004\016\014" +
    "\047\016\005\037\027\052\025\055\014\056\045\057\053" +
    "\060\012\061\051\062\021\063\056\064\013\065\037\066" +
    "\032\067\024\001\002\000\042\004\016\014\047\016\005" +
    "\037\027\052\025\055\014\056\045\057\053\060\012\061" +
    "\051\062\021\063\056\064\013\065\037\066\032\067\024" +
    "\001\002\000\042\004\016\014\047\016\005\037\027\052" +
    "\025\055\014\056\045\057\053\060\012\061\051\062\021" +
    "\063\056\064\013\065\037\066\032\067\024\001\002\000" +
    "\042\004\016\014\047\016\005\037\027\052\025\055\014" +
    "\056\045\057\053\060\012\061\051\062\021\063\056\064" +
    "\013\065\037\066\032\067\024\001\002\000\052\002\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\172\036\173\040\uffdb\041\uffdb\045\uffdb\046\uffdb\001" +
    "\002\000\042\004\016\014\047\016\005\037\027\052\025" +
    "\055\014\056\045\057\053\060\012\061\051\062\021\063" +
    "\056\064\013\065\037\066\032\067\024\001\002\000\042" +
    "\004\016\014\047\016\005\037\027\052\025\055\014\056" +
    "\045\057\053\060\012\061\051\062\021\063\056\064\013" +
    "\065\037\066\032\067\024\001\002\000\060\002\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\011\uffd4\013\uffd4\015\uffd4\017\uffd4" +
    "\020\147\021\150\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\043\151" +
    "\045\uffd4\046\uffd4\001\002\000\060\002\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\011\uffd5\013\uffd5\015\uffd5\017\uffd5\020\147" +
    "\021\150\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\043\151\045\uffd5" +
    "\046\uffd5\001\002\000\052\002\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\011\uffdd\013\uffdd\015\uffdd\017\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\172\036\173\040" +
    "\uffdd\041\uffdd\045\uffdd\046\uffdd\001\002\000\052\002\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\011\uffd8\013\uffd8\015\uffd8\017" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\172\036\173\040\uffd8\041\uffd8\045\uffd8\046\uffd8\001" +
    "\002\000\052\002\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9" +
    "\013\uffd9\015\uffd9\017\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\172\036\173\040\uffd9\041\uffd9" +
    "\045\uffd9\046\uffd9\001\002\000\052\002\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\011\uffdc\013\uffdc\015\uffdc\017\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\172\036" +
    "\173\040\uffdc\041\uffdc\045\uffdc\046\uffdc\001\002\000\052" +
    "\002\uffda\005\uffda\006\uffda\007\uffda\011\uffda\013\uffda\015" +
    "\uffda\017\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\172\036\173\040\uffda\041\uffda\045\uffda\046" +
    "\uffda\001\002\000\042\004\016\014\047\016\005\037\027" +
    "\052\025\055\014\056\045\057\053\060\012\061\051\062" +
    "\021\063\056\064\013\065\037\066\032\067\024\001\002" +
    "\000\066\002\uffca\005\uffca\006\uffca\007\uffca\011\uffca\013" +
    "\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\040\uffca\041\uffca\043\uffca\045\uffca" +
    "\046\uffca\001\002\000\006\041\062\045\206\001\002\000" +
    "\102\004\016\012\042\014\047\016\005\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041" +
    "\uffd6\042\023\044\030\046\uffd6\047\046\050\054\051\052" +
    "\052\025\054\017\055\014\056\045\057\053\060\012\061" +
    "\051\062\021\063\056\064\013\065\037\066\032\067\024" +
    "\001\002\000\004\046\210\001\002\000\122\002\uffd6\004" +
    "\016\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\042\013\uffd6" +
    "\014\047\015\uffd6\016\005\017\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041\uffd6" +
    "\042\023\044\030\046\uffd6\047\046\050\054\051\052\052" +
    "\025\054\017\055\014\056\045\057\053\060\012\061\051" +
    "\062\021\063\056\064\013\065\037\066\032\067\024\001" +
    "\002\000\024\002\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\013\uffe8\015\uffe8\017\uffe8\046\uffe8\001\002\000\070\002" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\013\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\040\uffc8\041\uffc8\043\uffc8\045\uffc8\046" +
    "\uffc8\001\002\000\040\004\016\014\047\016\005\052\025" +
    "\055\014\056\045\057\053\060\012\061\051\062\021\063" +
    "\056\064\013\065\037\066\032\067\024\001\002\000\010" +
    "\004\070\007\215\014\067\001\002\000\040\004\016\014" +
    "\047\016\005\052\025\055\014\056\045\057\053\060\012" +
    "\061\051\062\021\063\056\064\013\065\037\066\032\067" +
    "\024\001\002\000\010\004\070\005\217\014\067\001\002" +
    "\000\076\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\040\uffb1\041\uffb1\043\uffb1\045\uffb1\046\uffb1\001\002\000" +
    "\032\002\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\013\uffdf" +
    "\015\uffdf\017\uffdf\040\uffdf\041\uffdf\045\uffdf\046\uffdf\001" +
    "\002\000\024\002\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7" +
    "\013\ufff7\015\ufff7\017\ufff7\046\ufff7\001\002\000\006\005" +
    "\230\007\227\001\002\000\006\005\225\007\224\001\002" +
    "\000\100\004\016\005\uffd6\007\uffd6\012\042\014\047\016" +
    "\005\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\037\027\040\uffd6\041\uffd6\042\023\044\030\047\046\051" +
    "\052\052\025\055\014\056\045\057\053\060\012\061\051" +
    "\062\021\063\056\064\013\065\037\066\032\067\024\001" +
    "\002\000\076\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\011\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\040\uffbb\041\uffbb\043\uffbb\045\uffbb\046\uffbb\001\002" +
    "\000\006\005\uffac\007\uffac\001\002\000\100\004\016\005" +
    "\uffd6\007\uffd6\012\042\014\047\016\005\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041" +
    "\uffd6\042\023\044\030\047\046\051\052\052\025\055\014" +
    "\056\045\057\053\060\012\061\051\062\021\063\056\064" +
    "\013\065\037\066\032\067\024\001\002\000\076\002\uffae" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\013\uffae\014" +
    "\uffae\015\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae\041\uffae" +
    "\043\uffae\045\uffae\046\uffae\001\002\000\006\005\uffad\007" +
    "\uffad\001\002\000\006\007\uffb4\017\uffb4\001\002\000\010" +
    "\007\uffb2\011\240\017\uffb2\001\002\000\006\007\235\017" +
    "\236\001\002\000\102\004\016\007\uffd6\011\uffd6\012\042" +
    "\014\047\016\005\017\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\037\027\040\uffd6\041\uffd6\042\023" +
    "\044\030\047\046\051\052\052\025\055\014\056\045\057" +
    "\053\060\012\061\051\062\021\063\056\064\013\065\037" +
    "\066\032\067\024\001\002\000\076\002\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\043\uffb7\045" +
    "\uffb7\046\uffb7\001\002\000\006\007\uffb5\017\uffb5\001\002" +
    "\000\004\051\052\001\002\000\006\007\uffb3\017\uffb3\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\060\002\014\003\003\004\007\005\057\006" +
    "\010\007\035\010\025\011\021\012\047\015\005\020\032" +
    "\025\030\026\040\027\034\030\054\031\056\032\006\034" +
    "\037\035\017\036\033\037\060\040\042\041\043\001\001" +
    "\000\002\001\001\000\050\007\035\010\025\012\047\013" +
    "\233\014\231\015\005\020\032\025\232\026\040\027\034" +
    "\030\062\031\056\032\006\034\037\035\017\036\033\037" +
    "\060\040\042\041\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\007\035\010\025\012\047\015\005\020\032\022" +
    "\221\025\222\026\040\027\034\030\062\031\056\032\006" +
    "\034\037\035\017\036\033\037\060\040\042\041\043\001" +
    "\001\000\044\007\035\010\025\012\047\015\005\020\032" +
    "\025\220\026\040\027\034\030\062\031\056\032\006\034" +
    "\037\035\017\036\033\037\060\040\042\041\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\035\020\032\026\040\027\034\030\062\031\056" +
    "\032\006\034\037\035\017\036\033\041\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\035\020\032\030\062\032\006\036\211\001\001\000" +
    "\034\007\035\020\032\026\040\027\034\030\062\031\056" +
    "\032\006\034\037\035\017\036\033\037\204\040\042\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\002\014\004\142\005\057\006\010\007\035\010" +
    "\025\011\021\012\047\015\005\020\032\025\030\026\040" +
    "\027\034\030\054\031\056\032\006\034\037\035\017\036" +
    "\033\037\060\040\042\041\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\007\035\010\025\012\047\015\005\020\032\021\126" +
    "\025\071\026\040\027\034\030\062\031\056\032\006\034" +
    "\037\035\017\036\033\037\060\040\042\041\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\007\035\020\032\026\040\027\034\030\062" +
    "\031\056\032\006\034\037\035\017\036\033\040\063\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\035\020\032\026\040\027\034\030\062\031\056\032" +
    "\006\034\037\035\017\036\033\041\065\001\001\000\002" +
    "\001\001\000\012\007\035\020\032\030\075\032\006\001" +
    "\001\000\046\007\035\010\025\012\047\015\005\020\032" +
    "\021\070\025\071\026\040\027\034\030\062\031\056\032" +
    "\006\034\037\035\017\036\033\037\060\040\042\041\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\007" +
    "\035\010\025\012\047\015\005\020\032\025\074\026\040" +
    "\027\034\030\062\031\056\032\006\034\037\035\017\036" +
    "\033\037\060\040\042\041\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\007\035\010\025\012\047\015\005\020\032\025\100" +
    "\026\040\027\034\030\062\031\056\032\006\034\037\035" +
    "\017\036\033\037\060\040\042\041\043\001\001\000\002" +
    "\001\001\000\044\007\035\010\025\012\047\015\005\020" +
    "\032\025\102\026\040\027\034\030\062\031\056\032\006" +
    "\034\037\035\017\036\033\037\060\040\042\041\043\001" +
    "\001\000\002\001\001\000\010\016\106\017\107\033\110" +
    "\001\001\000\054\002\014\005\105\006\010\007\035\010" +
    "\025\011\021\012\047\015\005\020\032\025\030\026\040" +
    "\027\034\030\054\031\056\032\006\034\037\035\017\036" +
    "\033\037\060\040\042\041\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\002\014\005\122\006\010\007\035\010" +
    "\025\011\021\012\047\015\005\020\032\025\030\026\040" +
    "\027\034\030\054\031\056\032\006\034\037\035\017\036" +
    "\033\037\060\040\042\041\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\002\014\005\121\006\010\007" +
    "\035\010\025\011\021\012\047\015\005\020\032\025\030" +
    "\026\040\027\034\030\054\031\056\032\006\034\037\035" +
    "\017\036\033\037\060\040\042\041\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\132\024\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\007\035\010\025" +
    "\012\047\015\005\020\032\025\135\026\040\027\034\030" +
    "\062\031\056\032\006\034\037\035\017\036\033\037\060" +
    "\040\042\041\043\001\001\000\002\001\001\000\004\024" +
    "\141\001\001\000\054\002\014\005\140\006\010\007\035" +
    "\010\025\011\021\012\047\015\005\020\032\025\030\026" +
    "\040\027\034\030\054\031\056\032\006\034\037\035\017" +
    "\036\033\037\060\040\042\041\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\002\014" +
    "\005\145\006\010\007\035\010\025\011\021\012\047\015" +
    "\005\020\032\025\030\026\040\027\034\030\054\031\056" +
    "\032\006\034\037\035\017\036\033\037\060\040\042\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\035\020\032\027\161\030\062\031\056\032\006\036" +
    "\033\001\001\000\020\007\035\020\032\027\160\030\062" +
    "\031\056\032\006\036\033\001\001\000\020\007\035\020" +
    "\032\027\151\030\062\031\056\032\006\036\033\001\001" +
    "\000\002\001\001\000\016\007\035\020\032\030\062\031" +
    "\157\032\006\036\033\001\001\000\016\007\035\020\032" +
    "\030\062\031\156\032\006\036\033\001\001\000\016\007" +
    "\035\020\032\030\062\031\155\032\006\036\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\035\020\032" +
    "\026\040\027\034\030\062\031\056\032\006\035\201\036" +
    "\033\001\001\000\024\007\035\020\032\026\040\027\034" +
    "\030\062\031\056\032\006\035\200\036\033\001\001\000" +
    "\024\007\035\020\032\026\040\027\034\030\062\031\056" +
    "\032\006\035\177\036\033\001\001\000\024\007\035\020" +
    "\032\026\040\027\034\030\062\031\056\032\006\035\176" +
    "\036\033\001\001\000\024\007\035\020\032\026\040\027" +
    "\034\030\062\031\056\032\006\035\175\036\033\001\001" +
    "\000\024\007\035\020\032\026\040\027\034\030\062\031" +
    "\056\032\006\035\170\036\033\001\001\000\002\001\001" +
    "\000\022\007\035\020\032\026\174\027\034\030\062\031" +
    "\056\032\006\036\033\001\001\000\022\007\035\020\032" +
    "\026\173\027\034\030\062\031\056\032\006\036\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\035\020\032\030\062\031\203" +
    "\032\006\036\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\002\014\005\206\006\010\007\035\010\025" +
    "\011\021\012\047\015\005\020\032\025\030\026\040\027" +
    "\034\030\054\031\056\032\006\034\037\035\017\036\033" +
    "\037\060\040\042\041\043\001\001\000\002\001\001\000" +
    "\054\002\014\005\210\006\010\007\035\010\025\011\021" +
    "\012\047\015\005\020\032\025\030\026\040\027\034\030" +
    "\054\031\056\032\006\034\037\035\017\036\033\037\060" +
    "\040\042\041\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\035\020\032\030\213\032\006\001\001" +
    "\000\002\001\001\000\012\007\035\020\032\030\215\032" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\007\035\010\025\012\047\015\005\020\032" +
    "\025\225\026\040\027\034\030\062\031\056\032\006\034" +
    "\037\035\017\036\033\037\060\040\042\041\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\035\010" +
    "\025\012\047\015\005\020\032\025\230\026\040\027\034" +
    "\030\062\031\056\032\006\034\037\035\017\036\033\037" +
    "\060\040\042\041\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\007\035\010\025\012\047\014\236\015\005" +
    "\020\032\025\232\026\040\027\034\030\062\031\056\032" +
    "\006\034\037\035\017\036\033\037\060\040\042\041\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\240\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		//SmplLexer lexer;

		//InputStreamReader in = null;

		//public SmplParser(InputStream is) {
	     //   	in = new InputStreamReader(is);
		//}

		//public void report_error(String message, Object info) {
		 //   System.err.println(message);
		//}
        SmplLexer lexer = (SmplLexer) getScanner();
		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // argList ::= expression 
            {
              ArrayList<IRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<IRExp> lst = new ArrayList<>(); lst.add(e); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // argList ::= argList COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 alst.add(e); RESULT = alst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // List ::= expression COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e1 = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<IRExp> lst = new ArrayList<>(); lst.add(e1); lst.add(e); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("List",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // List ::= List COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 alst.add(e); RESULT = alst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("List",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // multiExp ::= LPAREN List RPAREN 
            {
              IRExpMultiExp RESULT =null;
		int multiexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int multiexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> multiexplst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpMultiExp(multiexplst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("multiExp",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // callProc ::= LBRAK argList RBRAK 
            {
              IRExp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallShort(new IRExpVar("list"), alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // callProc ::= factor LPAREN argList RPAREN 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallShort(f,alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // callProc ::= CALL LPAREN factor COMMA factor RPAREN 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp alst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallFull(f, alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // spec ::= expression 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		  RESULT = new Specification(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("spec",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // spec ::= expression COLN procExp 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpProc p = (IRExpProc)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Specification(e,p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("spec",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // specLst ::= spec 
            {
              ArrayList<Specification> RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Specification sp = (Specification)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<Specification> lst = new ArrayList<>(); lst.add(sp); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("specLst",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // specLst ::= specLst COMMA spec 
            {
              ArrayList<Specification> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Specification> slst = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Specification sp = (Specification)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 slst.add(sp); RESULT = slst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("specLst",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unique ::= factor LBRAK factor RBRAK 
            {
              IRExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp v = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpGetIndex(v, n);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("unique",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unique ::= LVEC specLst RVEC 
            {
              IRExp RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Specification> slst = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpVector(slst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("unique",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= callProc 
            {
              IRExp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp call = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = call; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= unique 
            {
              IRExp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp u = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = u; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= multiExp 
            {
              IRExp RESULT =null;
		int multiexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int multiexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpMultiExp multiexplst = (IRExpMultiExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = multiexplst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= LPAREN expression RPAREN 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= NIL 
            {
              IRExp RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String nil = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= VARIABLE 
            {
              IRExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= FALS 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(false); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= TRU 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(true); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= UNICODE 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit("u",ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= CHARACTER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit("c",ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= STRING 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= DOUBLE 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= HEXA 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit("h",ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= BINARY 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit("b",ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= INTEGER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // negat ::= factor 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("negat",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // negat ::= BNOT negat 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBnot(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("negat",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exponent ::= negat 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("exponent",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exponent ::= negat EXPT exponent 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpExpt(n,expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("exponent",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= exponent 
            {
              IRExp RESULT =null;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = expt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term MOD exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpMod(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= term DIV exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpDiv(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term MUL exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
        RESULT = new IRExpMul(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithExp ::= term 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arithExp ::= arithExp MINUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpSub(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithExp ::= arithExp CAT term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
                RESULT = new IRExpCat(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithExp ::= arithExp PLUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpAdd(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bitWiseExp ::= arithExp 
            {
              IRExp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ae; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bitWiseExp ::= bitWiseExp BOR arithExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBor(be, ae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bitWiseExp ::= bitWiseExp BAND arithExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBand(be, ae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relatExp ::= 
            {
              IRExp RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relatExp ::= bitWiseExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = be; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relatExp ::= relatExp NQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpNqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relatExp ::= relatExp LQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relatExp ::= relatExp GQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relatExp ::= relatExp LST bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLst(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relatExp ::= relatExp GRT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGrt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relatExp ::= relatExp EQV bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpEqv(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logicNotExp ::= relatExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = re; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNotExp",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logicNotExp ::= NOT logicNotExp 
            {
              IRExp RESULT =null;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLN(lne); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNotExp",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // logicAndExp ::= logicNotExp 
            {
              IRExp RESULT =null;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = lne; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAndExp",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // logicAndExp ::= logicAndExp AND logicNotExp 
            {
              IRExp RESULT =null;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLA(lae,lne); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAndExp",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // logicOrExp ::= logicAndExp 
            {
              IRExp RESULT =null;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = lae ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicOrExp",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // logicOrExp ::= logicOrExp OR logicAndExp 
            {
              IRExp RESULT =null;
		int loeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int loeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp loe = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLO(loe,lae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicOrExp",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binding ::= VARIABLE EQV expression 
            {
              Binding RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Binding(id, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bindingList ::= binding 
            {
              BindingList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new BindingList(b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingList",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bindingList ::= bindingList COMMA binding 
            {
              BindingList RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		BindingList blst = (BindingList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 blst.add(b); RESULT = blst;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingList",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // letExp ::= LET LPAREN bindingList RPAREN stmt 
            {
              IRExpLet RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		BindingList blst = (BindingList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLet(blst, body); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letExp",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ifExp ::= IF logicOrExp THEN stmt ELSE stmt 
            {
              IRExpIf RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		IRExp pred = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int thenClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int thenClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Statement thenClause = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int elseClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement elseClause = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpIf(pred,thenClause, elseClause); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ifExp",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramListNE ::= VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("norm", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramListNE ::= LAZY VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("lazy", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramListNE ::= paramList COMMA VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("norm", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramListNE ::= paramList COMMA LAZY VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("lazy", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramList ::= empty 
            {
              ParamLst RESULT =null;
		 RESULT = new ParamLst(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramList ::= paramListNE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procExp ::= PROC VARIABLE stmt 
            {
              IRExpProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ParamLst lst = new ParamLst("norm", id); RESULT = new IRExpProc(lst, body, "any"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procExp ::= PROC LPAREN paramList DOT VARIABLE RPAREN stmt 
            {
              IRExpProc RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int prestleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int prestright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String prest = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("norm",prest); RESULT = new IRExpProc(plst, body, "least") ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // procExp ::= PROC LPAREN paramList RPAREN stmt 
            {
              IRExpProc RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpProc(plst, body, "fixed") ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= ifExp 
            {
              IRExp RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpIf ifexp = (IRExpIf)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ifexp; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= procExp 
            {
              IRExp RESULT =null;
		int procstmtleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int procstmtright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpProc procstmt = (IRExpProc)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = procstmt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= LBRACE stmtList RBRACE 
            {
              IRExp RESULT =null;
		int compexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int compexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence compexplst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpCompExp(compexplst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= letExp 
            {
              IRExp RESULT =null;
		int ltstmtleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ltstmtright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpLet ltstmt = (IRExpLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ltstmt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= logicOrExp 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // printLnStmt ::= PRINTLN expression 
            {
              StmtPrintLn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtPrintLn(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("printLnStmt",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defStmt ::= DEF VARIABLE expression 
            {
              StmtDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDef(id, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("defStmt",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= factor ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vlstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vlstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp vlst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp alst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDefinition(vlst, alst);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtExpr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= printLnStmt 
            {
              Statement RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtPrintLn ps = (StmtPrintLn)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ps; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= defStmt 
            {
              Statement RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDef ds = (StmtDef)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ds; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList SEMI stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		lst.add(s);
		RESULT = lst;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

