
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 27 21:30:41 EST 2018
//----------------------------------------------------

package smpl.syntax;

import smpl.semantics.*;
import smpl.values.*;
import smpl.syntax.IRExpProc.*;
import smpl.builtIn_necessities.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 27 21:30:41 EST 2018
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\012\005\000\002\002\006\000\002\002\006\000\002" +
    "\034\003\000\002\034\003\000\002\034\005\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\021\007" +
    "\000\002\021\011\000\002\021\005\000\002\022\003\000" +
    "\002\022\003\000\002\023\006\000\002\023\005\000\002" +
    "\023\004\000\002\023\003\000\002\013\010\000\002\014" +
    "\012\000\002\014\006\000\002\015\005\000\002\016\005" +
    "\000\002\016\003\000\002\011\007\000\002\027\005\000" +
    "\002\027\003\000\002\030\005\000\002\031\005\000\002" +
    "\031\003\000\002\032\005\000\002\032\003\000\002\033" +
    "\004\000\002\033\003\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\003\000\002\043\002\000\002" +
    "\044\005\000\002\044\005\000\002\044\003\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\003\000\002\040\005\000\002\040\003\000\002" +
    "\045\004\000\002\045\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\005\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\041\005\000\002\041" +
    "\006\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\003\000\002\024\010\000\002\024\006\000" +
    "\002\024\005\000\002\007\005\000\002\026\005\000\002" +
    "\026\005\000\002\025\005\000\002\025\003\000\002\010" +
    "\005\000\002\010\005\000\002\042\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\106\002\uffcf\004\016\006\uffcf\012\045\014" +
    "\052\016\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\044\031\047" +
    "\013\050\051\051\056\052\055\053\025\055\017\056\061" +
    "\057\047\060\011\061\015\062\046\063\054\064\021\065" +
    "\014\066\040\067\034\070\024\001\002\000\004\002\273" +
    "\001\002\000\102\004\016\007\uffcf\011\uffcf\012\045\014" +
    "\052\016\005\017\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\044" +
    "\031\047\013\050\051\052\055\053\025\057\047\060\011" +
    "\061\015\062\046\063\054\064\021\065\014\066\040\067" +
    "\034\070\024\001\002\000\024\002\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\011\ufff2\013\ufff2\015\ufff2\017\ufff2\046\ufff2\001" +
    "\002\000\076\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\011\uffb5\013\uffb5\014\uffb5\015\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\040\uffb5\041\uffb5\043\uffb5\045\uffb5\046\uffb5\001\002" +
    "\000\006\002\001\006\155\001\002\000\004\004\261\001" +
    "\002\000\024\002\ufffd\005\ufffd\006\ufffd\007\ufffd\011\ufffd" +
    "\013\ufffd\015\ufffd\017\ufffd\046\ufffd\001\002\000\004\012" +
    "\244\001\002\000\076\002\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\040\uffbe\041\uffbe\043\uffbe\045\uffbe\046\uffbe" +
    "\001\002\000\076\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\040\uffbf\041\uffbf\043\uffbf\045\uffbf\046\uffbf\001" +
    "\002\000\100\004\016\005\uffcf\007\uffcf\012\045\014\052" +
    "\016\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\037\030\040\uffcf\041\uffcf\042\022\044\031\047\013" +
    "\050\051\052\055\053\025\057\047\060\011\061\015\062" +
    "\046\063\054\064\021\065\014\066\040\067\034\070\024" +
    "\001\002\000\004\004\231\001\002\000\052\002\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\013\uffd0\015\uffd0\017\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\202\036\203\040\uffd0\041\uffd0\045\uffd0\046\uffd0\001\002" +
    "\000\076\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\040\uffbc\041\uffbc\043\uffbc\045\uffbc\046\uffbc\001\002\000" +
    "\106\002\uffcf\004\016\005\uffcf\006\uffcf\007\uffcf\011\uffcf" +
    "\013\uffcf\014\052\015\uffcf\016\005\017\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf" +
    "\041\uffcf\042\022\045\uffcf\046\uffcf\053\025\057\047\060" +
    "\011\061\015\062\046\063\054\064\021\065\014\066\040" +
    "\067\034\070\024\001\002\000\024\002\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\011\ufffc\013\ufffc\015\ufffc\017\ufffc\046\ufffc" +
    "\001\002\000\076\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\011\uffb8\013\uffb8\014\uffb8\015\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\040\uffb8\041\uffb8\043\uffb8\045\uffb8\046\uffb8\001" +
    "\002\000\004\004\223\001\002\000\024\002\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\011\ufff4\013\ufff4\015\ufff4\017\ufff4\046" +
    "\ufff4\001\002\000\076\002\uffb4\004\uffb4\005\uffb4\006\uffb4" +
    "\007\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\040\uffb4\041\uffb4\043\uffb4\045\uffb4\046\uffb4" +
    "\001\002\000\040\004\016\014\052\016\005\037\030\053" +
    "\025\057\047\060\011\061\015\062\046\063\054\064\021" +
    "\065\014\066\040\067\034\070\024\001\002\000\064\004" +
    "\016\014\052\016\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\045" +
    "\uffcf\053\025\057\047\060\011\061\015\062\046\063\054" +
    "\064\021\065\014\066\040\067\034\070\024\001\002\000" +
    "\024\002\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\013\ufffa" +
    "\015\ufffa\017\ufffa\046\ufffa\001\002\000\076\002\uffb3\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\043" +
    "\uffb3\045\uffb3\046\uffb3\001\002\000\076\002\uffba\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\011\uffba\013\uffba\014\uffba\015" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\040\uffba\041\uffba\043\uffba" +
    "\045\uffba\046\uffba\001\002\000\070\002\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\011\uffc2\013\uffc2\015\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\213\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\040\uffc2\041\uffc2\043\uffc2\045\uffc2\046\uffc2\001\002\000" +
    "\066\002\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\013\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\164\023\165\024" +
    "\163\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\040\uffc8\041\uffc8\043\uffc8\045\uffc8\046" +
    "\uffc8\001\002\000\076\002\uffb6\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\040\uffb6\041\uffb6\043\uffb6\045\uffb6\046\uffb6" +
    "\001\002\000\076\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\040\uffbb\041\uffbb\043\uffbb\045\uffbb\046\uffbb\001" +
    "\002\000\046\002\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7" +
    "\013\uffd7\015\uffd7\017\uffd7\027\200\030\174\031\177\032" +
    "\173\033\175\034\176\040\uffd7\041\uffd7\045\uffd7\046\uffd7" +
    "\001\002\000\060\002\uffcc\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\013\uffcc\015\uffcc\017\uffcc\020\157\021\160\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\040\uffcc\041\uffcc\043\161\045\uffcc\046\uffcc\001\002" +
    "\000\032\002\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\013" +
    "\uffdb\015\uffdb\017\uffdb\040\070\041\uffdb\045\uffdb\046\uffdb" +
    "\001\002\000\032\002\uffd9\005\uffd9\006\uffd9\007\uffd9\011" +
    "\uffd9\013\uffd9\015\uffd9\017\uffd9\040\uffd9\041\uffd9\045\uffd9" +
    "\046\uffd9\001\002\000\106\004\016\006\uffcf\012\045\013" +
    "\uffcf\014\052\016\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\044" +
    "\031\047\013\050\051\051\056\052\055\053\025\055\017" +
    "\056\061\057\047\060\011\061\015\062\046\063\054\064" +
    "\021\065\014\066\040\067\034\070\024\001\002\000\076" +
    "\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\040\uffb9" +
    "\041\uffb9\043\uffb9\045\uffb9\046\uffb9\001\002\000\004\004" +
    "\151\001\002\000\024\002\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\011\ufffb\013\ufffb\015\ufffb\017\ufffb\046\ufffb\001\002\000" +
    "\004\004\137\001\002\000\100\004\016\007\uffcf\012\045" +
    "\014\052\015\uffcf\016\005\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022" +
    "\044\031\047\013\050\051\052\055\053\025\057\047\060" +
    "\011\061\015\062\046\063\054\064\021\065\014\066\040" +
    "\067\034\070\024\001\002\000\024\002\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\013\ufff1\015\ufff1\017\ufff1\046\ufff1" +
    "\001\002\000\076\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007" +
    "\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\040\uffbd\041\uffbd\043\uffbd\045\uffbd\046\uffbd\001" +
    "\002\000\006\004\112\062\113\001\002\000\004\062\110" +
    "\001\002\000\074\002\uffc0\004\073\005\uffc0\006\uffc0\007" +
    "\uffc0\011\uffc0\013\uffc0\014\072\015\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\106\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\040\uffc0\041\uffc0\043\uffc0\046\uffc0\001\002\000" +
    "\024\002\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\013\ufff0" +
    "\015\ufff0\017\ufff0\046\ufff0\001\002\000\004\004\103\001" +
    "\002\000\010\002\ufffe\006\ufffe\013\ufffe\001\002\000\066" +
    "\002\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\013\uffc4\015" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\040\uffc4\041\uffc4\043\uffc4\045\uffc4\046\uffc4" +
    "\001\002\000\026\002\ufff5\005\ufff5\006\ufff5\007\ufff5\011" +
    "\ufff5\013\ufff5\015\ufff5\017\ufff5\041\065\046\ufff5\001\002" +
    "\000\106\002\uffcf\004\016\005\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\013\uffcf\014\052\015\uffcf\016\005\017\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040" +
    "\uffcf\041\uffcf\042\022\045\uffcf\046\uffcf\053\025\057\047" +
    "\060\011\061\015\062\046\063\054\064\021\065\014\066" +
    "\040\067\034\070\024\001\002\000\074\002\uffc0\004\073" +
    "\005\uffc0\006\uffc0\007\uffc0\011\uffc0\013\uffc0\014\072\015" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\040\uffc0\041\uffc0\043\uffc0\045\uffc0" +
    "\046\uffc0\001\002\000\032\002\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\011\uffdc\013\uffdc\015\uffdc\017\uffdc\040\070\041\uffdc" +
    "\045\uffdc\046\uffdc\001\002\000\106\002\uffcf\004\016\005" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\013\uffcf\014\052\015\uffcf" +
    "\016\005\017\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\045\uffcf" +
    "\046\uffcf\053\025\057\047\060\011\061\015\062\046\063" +
    "\054\064\021\065\014\066\040\067\034\070\024\001\002" +
    "\000\032\002\uffda\005\uffda\006\uffda\007\uffda\011\uffda\013" +
    "\uffda\015\uffda\017\uffda\040\uffda\041\uffda\045\uffda\046\uffda" +
    "\001\002\000\036\004\016\014\052\016\005\053\025\057" +
    "\047\060\011\061\015\062\046\063\054\064\021\065\014" +
    "\066\040\067\034\070\024\001\002\000\100\004\016\005" +
    "\uffcf\007\uffcf\012\045\014\052\016\005\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf\041" +
    "\uffcf\042\022\044\031\047\013\050\051\052\055\053\025" +
    "\057\047\060\011\061\015\062\046\063\054\064\021\065" +
    "\014\066\040\067\034\070\024\001\002\000\006\005\077" +
    "\007\076\001\002\000\010\005\uffa5\007\uffa5\015\uffa5\001" +
    "\002\000\102\004\016\005\uffcf\007\uffcf\012\045\014\052" +
    "\015\uffcf\016\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\044\031" +
    "\047\013\050\051\052\055\053\025\057\047\060\011\061" +
    "\015\062\046\063\054\064\021\065\014\066\040\067\034" +
    "\070\024\001\002\000\076\002\uffab\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\011\uffab\013\uffab\014\uffab\015\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\040\uffab\041\uffab\043\uffab\045\uffab\046" +
    "\uffab\001\002\000\010\005\uffa6\007\uffa6\015\uffa6\001\002" +
    "\000\010\004\073\014\072\015\102\001\002\000\076\002" +
    "\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1\041" +
    "\uffb1\043\uffb1\045\uffb1\046\uffb1\001\002\000\076\004\016" +
    "\005\uffcf\012\045\014\052\016\005\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf" +
    "\042\022\044\031\047\013\050\051\052\055\053\025\057" +
    "\047\060\011\061\015\062\046\063\054\064\021\065\014" +
    "\066\040\067\034\070\024\001\002\000\004\005\105\001" +
    "\002\000\024\002\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6" +
    "\013\ufff6\015\ufff6\017\ufff6\046\ufff6\001\002\000\116\002" +
    "\uffcf\004\016\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\045" +
    "\013\uffcf\014\052\015\uffcf\016\005\017\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf" +
    "\041\uffcf\042\022\044\031\046\uffcf\047\013\050\051\052" +
    "\055\053\025\057\047\060\011\061\015\062\046\063\054" +
    "\064\021\065\014\066\040\067\034\070\024\001\002\000" +
    "\024\002\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\013\ufff9" +
    "\015\ufff9\017\ufff9\046\ufff9\001\002\000\116\002\uffcf\004" +
    "\016\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\045\013\uffcf" +
    "\014\052\015\uffcf\016\005\017\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf" +
    "\042\022\044\031\046\uffcf\047\013\050\051\052\055\053" +
    "\025\057\047\060\011\061\015\062\046\063\054\064\021" +
    "\065\014\066\040\067\034\070\024\001\002\000\024\002" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8\013\ufff8\015\ufff8" +
    "\017\ufff8\046\ufff8\001\002\000\014\005\uffa2\007\uffa2\010" +
    "\uffa2\054\120\062\121\001\002\000\124\002\uffcf\004\016" +
    "\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\045\013\uffcf\014" +
    "\052\015\uffcf\016\005\017\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042" +
    "\022\044\031\046\uffcf\047\013\050\051\051\056\052\055" +
    "\053\025\055\017\056\061\057\047\060\011\061\015\062" +
    "\046\063\054\064\021\065\014\066\040\067\034\070\024" +
    "\001\002\000\024\002\uffed\005\uffed\006\uffed\007\uffed\011" +
    "\uffed\013\uffed\015\uffed\017\uffed\046\uffed\001\002\000\010" +
    "\005\124\007\123\010\125\001\002\000\010\005\uffec\007" +
    "\uffec\010\uffec\001\002\000\010\005\uffeb\007\uffeb\010\uffeb" +
    "\001\002\000\004\062\122\001\002\000\010\005\uffe7\007" +
    "\uffe7\010\uffe7\001\002\000\010\005\uffe8\007\uffe8\010\uffe8" +
    "\001\002\000\006\054\132\062\133\001\002\000\124\002" +
    "\uffcf\004\016\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\045" +
    "\013\uffcf\014\052\015\uffcf\016\005\017\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf" +
    "\041\uffcf\042\022\044\031\046\uffcf\047\013\050\051\051" +
    "\056\052\055\053\025\055\017\056\061\057\047\060\011" +
    "\061\015\062\046\063\054\064\021\065\014\066\040\067" +
    "\034\070\024\001\002\000\004\062\126\001\002\000\004" +
    "\005\127\001\002\000\124\002\uffcf\004\016\005\uffcf\006" +
    "\uffcf\007\uffcf\011\uffcf\012\045\013\uffcf\014\052\015\uffcf" +
    "\016\005\017\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\044\031" +
    "\046\uffcf\047\013\050\051\051\056\052\055\053\025\055" +
    "\017\056\061\057\047\060\011\061\015\062\046\063\054" +
    "\064\021\065\014\066\040\067\034\070\024\001\002\000" +
    "\024\002\uffee\005\uffee\006\uffee\007\uffee\011\uffee\013\uffee" +
    "\015\uffee\017\uffee\046\uffee\001\002\000\024\002\uffef\005" +
    "\uffef\006\uffef\007\uffef\011\uffef\013\uffef\015\uffef\017\uffef" +
    "\046\uffef\001\002\000\004\062\134\001\002\000\010\005" +
    "\uffe9\007\uffe9\010\uffe9\001\002\000\010\005\uffea\007\uffea" +
    "\010\uffea\001\002\000\006\007\076\015\136\001\002\000" +
    "\076\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\040" +
    "\uffaa\041\uffaa\043\uffaa\045\uffaa\046\uffaa\001\002\000\004" +
    "\062\142\001\002\000\006\005\146\007\145\001\002\000" +
    "\006\005\uffde\007\uffde\001\002\000\004\027\143\001\002" +
    "\000\100\004\016\005\uffcf\007\uffcf\012\045\014\052\016" +
    "\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\037\030\040\uffcf\041\uffcf\042\022\044\031\047\013\050" +
    "\051\052\055\053\025\057\047\060\011\061\015\062\046" +
    "\063\054\064\021\065\014\066\040\067\034\070\024\001" +
    "\002\000\006\005\uffdd\007\uffdd\001\002\000\004\062\142" +
    "\001\002\000\124\002\uffcf\004\016\005\uffcf\006\uffcf\007" +
    "\uffcf\011\uffcf\012\045\013\uffcf\014\052\015\uffcf\016\005" +
    "\017\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\037\030\040\uffcf\041\uffcf\042\022\044\031\046\uffcf" +
    "\047\013\050\051\051\056\052\055\053\025\055\017\056" +
    "\061\057\047\060\011\061\015\062\046\063\054\064\021" +
    "\065\014\066\040\067\034\070\024\001\002\000\024\002" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\013\uffe0\015\uffe0" +
    "\017\uffe0\046\uffe0\001\002\000\006\005\uffdf\007\uffdf\001" +
    "\002\000\004\005\152\001\002\000\076\002\uffa4\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\011\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\040\uffa4\041\uffa4\043\uffa4" +
    "\045\uffa4\046\uffa4\001\002\000\006\006\155\013\154\001" +
    "\002\000\024\002\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3" +
    "\013\ufff3\015\ufff3\017\ufff3\046\ufff3\001\002\000\110\002" +
    "\uffcf\004\016\006\uffcf\012\045\013\uffcf\014\052\016\005" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037" +
    "\030\040\uffcf\041\uffcf\042\022\044\031\047\013\050\051" +
    "\051\056\052\055\053\025\055\017\056\061\057\047\060" +
    "\011\061\015\062\046\063\054\064\021\065\014\066\040" +
    "\067\034\070\024\001\002\000\010\002\uffff\006\uffff\013" +
    "\uffff\001\002\000\040\004\016\014\052\016\005\037\030" +
    "\053\025\057\047\060\011\061\015\062\046\063\054\064" +
    "\021\065\014\066\040\067\034\070\024\001\002\000\040" +
    "\004\016\014\052\016\005\037\030\053\025\057\047\060" +
    "\011\061\015\062\046\063\054\064\021\065\014\066\040" +
    "\067\034\070\024\001\002\000\040\004\016\014\052\016" +
    "\005\037\030\053\025\057\047\060\011\061\015\062\046" +
    "\063\054\064\021\065\014\066\040\067\034\070\024\001" +
    "\002\000\066\002\uffca\005\uffca\006\uffca\007\uffca\011\uffca" +
    "\013\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022\164\023" +
    "\165\024\163\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca\043\uffca\045" +
    "\uffca\046\uffca\001\002\000\040\004\016\014\052\016\005" +
    "\037\030\053\025\057\047\060\011\061\015\062\046\063" +
    "\054\064\021\065\014\066\040\067\034\070\024\001\002" +
    "\000\040\004\016\014\052\016\005\037\030\053\025\057" +
    "\047\060\011\061\015\062\046\063\054\064\021\065\014" +
    "\066\040\067\034\070\024\001\002\000\040\004\016\014" +
    "\052\016\005\037\030\053\025\057\047\060\011\061\015" +
    "\062\046\063\054\064\021\065\014\066\040\067\034\070" +
    "\024\001\002\000\066\002\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\011\uffc6\013\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\041\uffc6\043" +
    "\uffc6\045\uffc6\046\uffc6\001\002\000\066\002\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\013\uffc7\015\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040" +
    "\uffc7\041\uffc7\043\uffc7\045\uffc7\046\uffc7\001\002\000\066" +
    "\002\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\013\uffc5\015" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\040\uffc5\041\uffc5\043\uffc5\045\uffc5\046\uffc5" +
    "\001\002\000\066\002\uffc9\005\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\013\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\164" +
    "\023\165\024\163\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9\043\uffc9" +
    "\045\uffc9\046\uffc9\001\002\000\066\002\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\011\uffcb\013\uffcb\015\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\164\023\165\024\163\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb" +
    "\041\uffcb\043\uffcb\045\uffcb\046\uffcb\001\002\000\040\004" +
    "\016\014\052\016\005\037\030\053\025\057\047\060\011" +
    "\061\015\062\046\063\054\064\021\065\014\066\040\067" +
    "\034\070\024\001\002\000\040\004\016\014\052\016\005" +
    "\037\030\053\025\057\047\060\011\061\015\062\046\063" +
    "\054\064\021\065\014\066\040\067\034\070\024\001\002" +
    "\000\040\004\016\014\052\016\005\037\030\053\025\057" +
    "\047\060\011\061\015\062\046\063\054\064\021\065\014" +
    "\066\040\067\034\070\024\001\002\000\040\004\016\014" +
    "\052\016\005\037\030\053\025\057\047\060\011\061\015" +
    "\062\046\063\054\064\021\065\014\066\040\067\034\070" +
    "\024\001\002\000\040\004\016\014\052\016\005\037\030" +
    "\053\025\057\047\060\011\061\015\062\046\063\054\064" +
    "\021\065\014\066\040\067\034\070\024\001\002\000\040" +
    "\004\016\014\052\016\005\037\030\053\025\057\047\060" +
    "\011\061\015\062\046\063\054\064\021\065\014\066\040" +
    "\067\034\070\024\001\002\000\052\002\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\011\uffd6\013\uffd6\015\uffd6\017\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\202\036" +
    "\203\040\uffd6\041\uffd6\045\uffd6\046\uffd6\001\002\000\040" +
    "\004\016\014\052\016\005\037\030\053\025\057\047\060" +
    "\011\061\015\062\046\063\054\064\021\065\014\066\040" +
    "\067\034\070\024\001\002\000\040\004\016\014\052\016" +
    "\005\037\030\053\025\057\047\060\011\061\015\062\046" +
    "\063\054\064\021\065\014\066\040\067\034\070\024\001" +
    "\002\000\060\002\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd" +
    "\013\uffcd\015\uffcd\017\uffcd\020\157\021\160\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\040\uffcd\041\uffcd\043\161\045\uffcd\046\uffcd\001\002\000" +
    "\060\002\uffce\005\uffce\006\uffce\007\uffce\011\uffce\013\uffce" +
    "\015\uffce\017\uffce\020\157\021\160\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\040\uffce" +
    "\041\uffce\043\161\045\uffce\046\uffce\001\002\000\052\002" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\013\uffd4\015\uffd4" +
    "\017\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\202\036\203\040\uffd4\041\uffd4\045\uffd4\046\uffd4" +
    "\001\002\000\052\002\uffd1\005\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\013\uffd1\015\uffd1\017\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\202\036\203\040\uffd1\041" +
    "\uffd1\045\uffd1\046\uffd1\001\002\000\052\002\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\013\uffd2\015\uffd2\017\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\202" +
    "\036\203\040\uffd2\041\uffd2\045\uffd2\046\uffd2\001\002\000" +
    "\052\002\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\013\uffd5" +
    "\015\uffd5\017\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\202\036\203\040\uffd5\041\uffd5\045\uffd5" +
    "\046\uffd5\001\002\000\052\002\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\013\uffd3\015\uffd3\017\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\202\036\203\040" +
    "\uffd3\041\uffd3\045\uffd3\046\uffd3\001\002\000\040\004\016" +
    "\014\052\016\005\037\030\053\025\057\047\060\011\061" +
    "\015\062\046\063\054\064\021\065\014\066\040\067\034" +
    "\070\024\001\002\000\066\002\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\011\uffc3\013\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\045\uffc3\046\uffc3\001\002\000\006\041\065\045" +
    "\216\001\002\000\104\004\016\012\045\014\052\016\005" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037" +
    "\030\040\uffcf\041\uffcf\042\022\044\031\046\uffcf\047\013" +
    "\050\051\051\056\052\055\053\025\055\017\056\061\057" +
    "\047\060\011\061\015\062\046\063\054\064\021\065\014" +
    "\066\040\067\034\070\024\001\002\000\004\046\220\001" +
    "\002\000\124\002\uffcf\004\016\005\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\012\045\013\uffcf\014\052\015\uffcf\016\005\017" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\037\030\040\uffcf\041\uffcf\042\022\044\031\046\uffcf\047" +
    "\013\050\051\051\056\052\055\053\025\055\017\056\061" +
    "\057\047\060\011\061\015\062\046\063\054\064\021\065" +
    "\014\066\040\067\034\070\024\001\002\000\024\002\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\011\uffe6\013\uffe6\015\uffe6\017" +
    "\uffe6\046\uffe6\001\002\000\070\002\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\011\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\040" +
    "\uffc1\041\uffc1\043\uffc1\045\uffc1\046\uffc1\001\002\000\036" +
    "\004\016\014\052\016\005\053\025\057\047\060\011\061" +
    "\015\062\046\063\054\064\021\065\014\066\040\067\034" +
    "\070\024\001\002\000\010\004\073\007\225\014\072\001" +
    "\002\000\036\004\016\014\052\016\005\053\025\057\047" +
    "\060\011\061\015\062\046\063\054\064\021\065\014\066" +
    "\040\067\034\070\024\001\002\000\010\004\073\005\227" +
    "\014\072\001\002\000\076\002\uffac\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\011\uffac\013\uffac\014\uffac\015\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\035\uffac\036\uffac\040\uffac\041\uffac\043\uffac\045\uffac\046" +
    "\uffac\001\002\000\032\002\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\013\uffd8\015\uffd8\017\uffd8\040\uffd8\041\uffd8\045" +
    "\uffd8\046\uffd8\001\002\000\076\004\016\005\uffcf\012\045" +
    "\014\052\016\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\044\031" +
    "\047\013\050\051\052\055\053\025\057\047\060\011\061" +
    "\015\062\046\063\054\064\021\065\014\066\040\067\034" +
    "\070\024\001\002\000\004\005\233\001\002\000\024\002" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\013\ufff7\015\ufff7" +
    "\017\ufff7\046\ufff7\001\002\000\006\005\242\007\241\001" +
    "\002\000\006\005\237\007\236\001\002\000\100\004\016" +
    "\005\uffcf\007\uffcf\012\045\014\052\016\005\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf" +
    "\041\uffcf\042\022\044\031\047\013\050\051\052\055\053" +
    "\025\057\047\060\011\061\015\062\046\063\054\064\021" +
    "\065\014\066\040\067\034\070\024\001\002\000\076\002" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041" +
    "\uffb7\043\uffb7\045\uffb7\046\uffb7\001\002\000\006\005\uffa7" +
    "\007\uffa7\001\002\000\100\004\016\005\uffcf\007\uffcf\012" +
    "\045\014\052\016\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\044" +
    "\031\047\013\050\051\052\055\053\025\057\047\060\011" +
    "\061\015\062\046\063\054\064\021\065\014\066\040\067" +
    "\034\070\024\001\002\000\076\002\uffa9\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\040\uffa9\041\uffa9\043\uffa9\045\uffa9" +
    "\046\uffa9\001\002\000\006\005\uffa8\007\uffa8\001\002\000" +
    "\076\004\016\011\uffcf\012\045\014\052\016\005\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040" +
    "\uffcf\041\uffcf\042\022\044\031\047\013\050\051\052\055" +
    "\053\025\057\047\060\011\061\015\062\046\063\054\064" +
    "\021\065\014\066\040\067\034\070\024\001\002\000\006" +
    "\007\uffe1\013\uffe1\001\002\000\004\011\257\001\002\000" +
    "\006\007\250\013\251\001\002\000\100\004\016\011\uffcf" +
    "\012\045\014\052\016\005\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022" +
    "\044\031\046\253\047\013\050\051\052\055\053\025\057" +
    "\047\060\011\061\015\062\046\063\054\064\021\065\014" +
    "\066\040\067\034\070\024\001\002\000\024\002\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\013\uffe4\015\uffe4\017\uffe4" +
    "\046\uffe4\001\002\000\006\007\uffe2\013\uffe2\001\002\000" +
    "\004\011\254\001\002\000\104\004\016\012\045\013\uffcf" +
    "\014\052\016\005\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\037\030\040\uffcf\041\uffcf\042\022\044\031" +
    "\047\013\050\051\051\056\052\055\053\025\055\017\056" +
    "\061\057\047\060\011\061\015\062\046\063\054\064\021" +
    "\065\014\066\040\067\034\070\024\001\002\000\004\013" +
    "\256\001\002\000\024\002\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\013\uffe5\015\uffe5\017\uffe5\046\uffe5\001\002\000" +
    "\106\004\016\007\uffcf\012\045\013\uffcf\014\052\016\005" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037" +
    "\030\040\uffcf\041\uffcf\042\022\044\031\047\013\050\051" +
    "\051\056\052\055\053\025\055\017\056\061\057\047\060" +
    "\011\061\015\062\046\063\054\064\021\065\014\066\040" +
    "\067\034\070\024\001\002\000\006\007\uffe3\013\uffe3\001" +
    "\002\000\004\005\262\001\002\000\076\002\uffa3\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\011\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\040\uffa3\041\uffa3\043\uffa3" +
    "\045\uffa3\046\uffa3\001\002\000\006\007\uffaf\017\uffaf\001" +
    "\002\000\010\007\uffad\011\271\017\uffad\001\002\000\006" +
    "\007\266\017\267\001\002\000\102\004\016\007\uffcf\011" +
    "\uffcf\012\045\014\052\016\005\017\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\030\040\uffcf\041" +
    "\uffcf\042\022\044\031\047\013\050\051\052\055\053\025" +
    "\057\047\060\011\061\015\062\046\063\054\064\021\065" +
    "\014\066\040\067\034\070\024\001\002\000\076\002\uffb2" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2" +
    "\043\uffb2\045\uffb2\046\uffb2\001\002\000\006\007\uffb0\017" +
    "\uffb0\001\002\000\004\052\055\001\002\000\006\007\uffae" +
    "\017\uffae\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\064\002\047\003\003\004\007\005\061\006" +
    "\011\007\036\010\026\011\025\012\022\013\052\014\057" +
    "\021\005\024\032\031\063\032\042\033\043\034\031\035" +
    "\041\036\035\037\056\040\062\041\006\043\040\044\017" +
    "\045\034\001\001\000\002\001\001\000\054\007\036\010" +
    "\026\011\025\013\052\014\057\017\264\020\262\021\005" +
    "\024\032\031\063\032\042\033\043\034\263\035\041\036" +
    "\035\037\065\040\062\041\006\043\040\044\017\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\007\036\010" +
    "\026\011\025\013\052\014\057\021\005\024\032\026\233" +
    "\031\063\032\042\033\043\034\234\035\041\036\035\037" +
    "\065\040\062\041\006\043\040\044\017\045\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\036\010\026\024\032\033\227\035\041\036\035" +
    "\037\065\040\062\041\006\043\040\044\017\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\036\010" +
    "\026\024\032\037\065\041\006\045\221\001\001\000\036" +
    "\007\036\010\026\024\032\031\214\032\042\033\043\035" +
    "\041\036\035\037\065\040\062\041\006\043\040\044\017" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\002\047" +
    "\004\152\005\061\006\011\007\036\010\026\011\025\012" +
    "\022\013\052\014\057\021\005\024\032\031\063\032\042" +
    "\033\043\034\031\035\041\036\035\037\056\040\062\041" +
    "\006\043\040\044\017\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\007\036\010\026\011\025\013\052\014\057\021\005" +
    "\024\032\025\134\031\063\032\042\033\043\034\074\035" +
    "\041\036\035\037\065\040\062\041\006\043\040\044\017" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\036\010\026\024\032" +
    "\032\066\033\043\035\041\036\035\037\065\040\062\041" +
    "\006\043\040\044\017\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\036\010\026\024\032\033" +
    "\070\035\041\036\035\037\065\040\062\041\006\043\040" +
    "\044\017\045\034\001\001\000\002\001\001\000\014\007" +
    "\036\010\026\024\032\037\100\041\006\001\001\000\052" +
    "\007\036\010\026\011\025\013\052\014\057\021\005\024" +
    "\032\025\073\031\063\032\042\033\043\034\074\035\041" +
    "\036\035\037\065\040\062\041\006\043\040\044\017\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\007\036\010\026\011\025\013\052\014\057\021\005\024" +
    "\032\031\063\032\042\033\043\034\077\035\041\036\035" +
    "\037\065\040\062\041\006\043\040\044\017\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\007\036\010\026\011\025\013" +
    "\052\014\057\021\005\024\032\031\063\032\042\033\043" +
    "\034\103\035\041\036\035\037\065\040\062\041\006\043" +
    "\040\044\017\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\007\036\010\026\011\025\013\052\014" +
    "\057\021\005\024\032\031\063\032\042\033\043\034\106" +
    "\035\041\036\035\037\065\040\062\041\006\043\040\044" +
    "\017\045\034\001\001\000\002\001\001\000\050\007\036" +
    "\010\026\011\025\013\052\014\057\021\005\024\032\031" +
    "\063\032\042\033\043\034\110\035\041\036\035\037\065" +
    "\040\062\041\006\043\040\044\017\045\034\001\001\000" +
    "\002\001\001\000\010\022\114\023\115\042\116\001\001" +
    "\000\060\002\047\005\113\006\011\007\036\010\026\011" +
    "\025\012\022\013\052\014\057\021\005\024\032\031\063" +
    "\032\042\033\043\034\031\035\041\036\035\037\056\040" +
    "\062\041\006\043\040\044\017\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\002\047\005\130\006\011\007" +
    "\036\010\026\011\025\012\022\013\052\014\057\021\005" +
    "\024\032\031\063\032\042\033\043\034\031\035\041\036" +
    "\035\037\056\040\062\041\006\043\040\044\017\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\002" +
    "\047\005\127\006\011\007\036\010\026\011\025\012\022" +
    "\013\052\014\057\021\005\024\032\031\063\032\042\033" +
    "\043\034\031\035\041\036\035\037\056\040\062\041\006" +
    "\043\040\044\017\045\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\137\030\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\007\036\010\026\011\025\013" +
    "\052\014\057\021\005\024\032\031\063\032\042\033\043" +
    "\034\143\035\041\036\035\037\065\040\062\041\006\043" +
    "\040\044\017\045\034\001\001\000\002\001\001\000\004" +
    "\030\147\001\001\000\060\002\047\005\146\006\011\007" +
    "\036\010\026\011\025\012\022\013\052\014\057\021\005" +
    "\024\032\031\063\032\042\033\043\034\031\035\041\036" +
    "\035\037\056\040\062\041\006\043\040\044\017\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\002\047\005\155\006\011\007\036\010\026\011" +
    "\025\012\022\013\052\014\057\021\005\024\032\031\063" +
    "\032\042\033\043\034\031\035\041\036\035\037\056\040" +
    "\062\041\006\043\040\044\017\045\034\001\001\000\002" +
    "\001\001\000\022\007\036\010\026\024\032\036\171\037" +
    "\065\040\062\041\006\045\034\001\001\000\022\007\036" +
    "\010\026\024\032\036\170\037\065\040\062\041\006\045" +
    "\034\001\001\000\022\007\036\010\026\024\032\036\161" +
    "\037\065\040\062\041\006\045\034\001\001\000\002\001" +
    "\001\000\020\007\036\010\026\024\032\037\065\040\167" +
    "\041\006\045\034\001\001\000\020\007\036\010\026\024" +
    "\032\037\065\040\166\041\006\045\034\001\001\000\020" +
    "\007\036\010\026\024\032\037\065\040\165\041\006\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\036\010\026\024\032\035\041\036\035\037\065\040\062" +
    "\041\006\044\211\045\034\001\001\000\026\007\036\010" +
    "\026\024\032\035\041\036\035\037\065\040\062\041\006" +
    "\044\210\045\034\001\001\000\026\007\036\010\026\024" +
    "\032\035\041\036\035\037\065\040\062\041\006\044\207" +
    "\045\034\001\001\000\026\007\036\010\026\024\032\035" +
    "\041\036\035\037\065\040\062\041\006\044\206\045\034" +
    "\001\001\000\026\007\036\010\026\024\032\035\041\036" +
    "\035\037\065\040\062\041\006\044\205\045\034\001\001" +
    "\000\026\007\036\010\026\024\032\035\041\036\035\037" +
    "\065\040\062\041\006\044\200\045\034\001\001\000\002" +
    "\001\001\000\024\007\036\010\026\024\032\035\204\036" +
    "\035\037\065\040\062\041\006\045\034\001\001\000\024" +
    "\007\036\010\026\024\032\035\203\036\035\037\065\040" +
    "\062\041\006\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\036" +
    "\010\026\024\032\037\065\040\213\041\006\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\002\047" +
    "\005\216\006\011\007\036\010\026\011\025\012\022\013" +
    "\052\014\057\021\005\024\032\031\063\032\042\033\043" +
    "\034\031\035\041\036\035\037\056\040\062\041\006\043" +
    "\040\044\017\045\034\001\001\000\002\001\001\000\060" +
    "\002\047\005\220\006\011\007\036\010\026\011\025\012" +
    "\022\013\052\014\057\021\005\024\032\031\063\032\042" +
    "\033\043\034\031\035\041\036\035\037\056\040\062\041" +
    "\006\043\040\044\017\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\036\010\026\024\032\037" +
    "\223\041\006\001\001\000\002\001\001\000\014\007\036" +
    "\010\026\024\032\037\225\041\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\007\036" +
    "\010\026\011\025\013\052\014\057\021\005\024\032\031" +
    "\063\032\042\033\043\034\231\035\041\036\035\037\065" +
    "\040\062\041\006\043\040\044\017\045\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\007\036\010\026\011\025\013\052\014" +
    "\057\021\005\024\032\031\063\032\042\033\043\034\237" +
    "\035\041\036\035\037\065\040\062\041\006\043\040\044" +
    "\017\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\007\036\010\026\011\025\013\052\014\057\021" +
    "\005\024\032\031\063\032\042\033\043\034\242\035\041" +
    "\036\035\037\065\040\062\041\006\043\040\044\017\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\007\036\010\026\011\025\013\052\014\057\015\244\016" +
    "\246\021\005\024\032\031\063\032\042\033\043\034\245" +
    "\035\041\036\035\037\065\040\062\041\006\043\040\044" +
    "\017\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\007\036\010\026\011\025\013" +
    "\052\014\057\015\251\021\005\024\032\031\063\032\042" +
    "\033\043\034\245\035\041\036\035\037\065\040\062\041" +
    "\006\043\040\044\017\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\002\047\005" +
    "\254\006\011\007\036\010\026\011\025\012\022\013\052" +
    "\014\057\021\005\024\032\031\063\032\042\033\043\034" +
    "\031\035\041\036\035\037\056\040\062\041\006\043\040" +
    "\044\017\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\002\047\005\257\006\011\007\036\010\026" +
    "\011\025\012\022\013\052\014\057\021\005\024\032\031" +
    "\063\032\042\033\043\034\031\035\041\036\035\037\056" +
    "\040\062\041\006\043\040\044\017\045\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\007" +
    "\036\010\026\011\025\013\052\014\057\020\267\021\005" +
    "\024\032\031\063\032\042\033\043\034\263\035\041\036" +
    "\035\037\065\040\062\041\006\043\040\044\017\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\271\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		//SmplLexer lexer;

		//InputStreamReader in = null;

		//public SmplParser(InputStream is) {
	     //   	in = new InputStreamReader(is);
		//}

		//public void report_error(String message, Object info) {
		 //   System.err.println(message);
		//}
        SmplLexer lexer = (SmplLexer) getScanner();
		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",32, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // read ::= READINT LPAREN RPAREN 
            {
              Read RESULT =null;
		 RESULT = new Read("int"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // read ::= READ LPAREN RPAREN 
            {
              Read RESULT =null;
		 RESULT = new Read("string"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("read",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // argList ::= expression 
            {
              ArrayList<IRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<IRExp> lst = new ArrayList<>(); lst.add(e); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // argList ::= argList COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 alst.add(e); RESULT = alst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // List ::= expression COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e1 = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<IRExp> lst = new ArrayList<>(); lst.add(e1); lst.add(e); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("List",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // List ::= List COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 alst.add(e); RESULT = alst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("List",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // multiExp ::= LPAREN List RPAREN 
            {
              IRExpMultiExp RESULT =null;
		int multiexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int multiexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> multiexplst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpMultiExp(multiexplst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("multiExp",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // callProc ::= LBRAK argList RBRAK 
            {
              IRExp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallShort(new IRExpVar("list"), alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // callProc ::= factor LPAREN argList RPAREN 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallShort(f,alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // callProc ::= CALL LPAREN factor COMMA factor RPAREN 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp alst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallFull(f, alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // spec ::= expression 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		  RESULT = new Specification(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("spec",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // spec ::= expression COLN procExp 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpProc p = (IRExpProc)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Specification(e,p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("spec",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // specLst ::= spec 
            {
              ArrayList<Specification> RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Specification sp = (Specification)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<Specification> lst = new ArrayList<>(); lst.add(sp); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("specLst",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // specLst ::= specLst COMMA spec 
            {
              ArrayList<Specification> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Specification> slst = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Specification sp = (Specification)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 slst.add(sp); RESULT = slst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("specLst",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unique ::= factor LBRAK factor RBRAK 
            {
              IRExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp v = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpGetIndex(v, n);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("unique",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unique ::= LVEC specLst RVEC 
            {
              IRExp RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Specification> slst = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpVector(slst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("unique",31, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= callProc 
            {
              IRExp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp call = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = call; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= read 
            {
              IRExp RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Read rs = (Read)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = rs; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= unique 
            {
              IRExp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp u = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = u; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= multiExp 
            {
              IRExp RESULT =null;
		int multiexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int multiexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpMultiExp multiexplst = (IRExpMultiExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = multiexplst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= LPAREN expression RPAREN 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= NIL 
            {
              IRExp RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String nil = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= VARIABLE 
            {
              IRExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= FALS 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(false); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= TRU 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(true); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= CHARACTER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Character ilit = (Character)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= STRING 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= DOUBLE 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= INTEGER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // negat ::= factor 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("negat",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // negat ::= BNOT negat 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBnot(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("negat",35, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exponent ::= negat 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("exponent",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exponent ::= negat EXPT exponent 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpExpt(n,expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("exponent",30, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= exponent 
            {
              IRExp RESULT =null;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = expt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= term MOD exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpMod(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= term DIV exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpDiv(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= term MUL exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
        RESULT = new IRExpMul(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arithExp ::= term 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithExp ::= arithExp MINUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpSub(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arithExp ::= arithExp CAT term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
                RESULT = new IRExpCat(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithExp ::= arithExp PLUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpAdd(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bitWiseExp ::= arithExp 
            {
              IRExp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ae; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bitWiseExp ::= bitWiseExp BOR arithExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBor(be, ae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bitWiseExp ::= bitWiseExp BAND arithExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBand(be, ae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",34, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // relatExp ::= 
            {
              IRExp RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relatExp ::= bitWiseExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = be; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relatExp ::= relatExp NQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpNqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relatExp ::= relatExp LQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relatExp ::= relatExp GQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relatExp ::= relatExp LST bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLst(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relatExp ::= relatExp GRT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGrt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relatExp ::= relatExp EQV bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpEqv(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",33, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logicNotExp ::= relatExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = re; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNotExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logicNotExp ::= NOT logicNotExp 
            {
              IRExp RESULT =null;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLN(lne); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicNotExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logicAndExp ::= logicNotExp 
            {
              IRExp RESULT =null;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = lne; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAndExp",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logicAndExp ::= logicAndExp AND logicNotExp 
            {
              IRExp RESULT =null;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int lneleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lneright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lne = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLA(lae,lne); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicAndExp",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logicOrExp ::= logicAndExp 
            {
              IRExp RESULT =null;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = lae ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicOrExp",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logicOrExp ::= logicOrExp OR logicAndExp 
            {
              IRExp RESULT =null;
		int loeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int loeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp loe = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int laeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int laeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp lae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLO(loe,lae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("logicOrExp",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binding ::= VARIABLE EQV expression 
            {
              Binding RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Binding(id, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bindingList ::= binding 
            {
              BindingList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new BindingList(b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingList",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bindingList ::= bindingList COMMA binding 
            {
              BindingList RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		BindingList blst = (BindingList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 blst.add(b); RESULT = blst;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingList",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // letExp ::= LET LPAREN bindingList RPAREN stmt 
            {
              IRExpLet RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		BindingList blst = (BindingList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLet(blst, body); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letExp",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // clauseLst ::= clause 
            {
              ArrayList<Clause> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<Clause> lst = new ArrayList<>(); lst.add(c); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("clauseLst",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // clauseLst ::= clauseLst COMMA clause 
            {
              ArrayList<Clause> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Clause> lst = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Clause c = (Clause)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 lst.add(c); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("clauseLst",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // clause ::= expression COLN stmt 
            {
              Clause RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp p = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Clause(p,new ExprStmt(c)); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("clause",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // caseExp ::= CASE LBRACE clauseLst RBRACE 
            {
              IRExpCase RESULT =null;
		int clstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int clstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Clause> clst = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpCase(clst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("caseExp",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // caseExp ::= CASE LBRACE clauseLst COMMA ELSE COLN stmt RBRACE 
            {
              IRExpCase RESULT =null;
		int clstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).left;
		int clstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).right;
		ArrayList<Clause> clst = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpCase(clst,new ExprStmt(e)); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("caseExp",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifExp ::= IF logicOrExp THEN stmt ELSE stmt 
            {
              IRExpIf RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		IRExp pred = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int thenClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int thenClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Statement thenClause = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int elseClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement elseClause = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpIf(pred,thenClause, elseClause); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ifExp",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramListNE ::= VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("norm", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramListNE ::= LAZY VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("lazy", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramListNE ::= paramList COMMA VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("norm", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramListNE ::= paramList COMMA LAZY VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("lazy", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramList ::= empty 
            {
              ParamLst RESULT =null;
		 RESULT = new ParamLst(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramList ::= paramListNE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procExp ::= PROC VARIABLE stmt 
            {
              IRExpProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ParamLst lst = new ParamLst("norm", id); RESULT = new IRExpProc(lst, body, "any"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procExp ::= PROC LPAREN paramList DOT VARIABLE RPAREN stmt 
            {
              IRExpProc RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int prestleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int prestright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String prest = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("norm",prest); RESULT = new IRExpProc(plst, body, "least") ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procExp ::= PROC LPAREN paramList RPAREN stmt 
            {
              IRExpProc RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpProc(plst, body, "fixed") ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= caseExp 
            {
              IRExp RESULT =null;
		int caseexpleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int caseexpright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpCase caseexp = (IRExpCase)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = caseexp; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= ifExp 
            {
              IRExp RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpIf ifexp = (IRExpIf)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ifexp; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= procExp 
            {
              IRExp RESULT =null;
		int procstmtleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int procstmtright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpProc procstmt = (IRExpProc)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = procstmt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= LBRACE stmtList RBRACE 
            {
              IRExp RESULT =null;
		int compexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int compexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence compexplst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpCompExp(compexplst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= letExp 
            {
              IRExp RESULT =null;
		int ltstmtleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ltstmtright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpLet ltstmt = (IRExpLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ltstmt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= logicOrExp 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // printStmt ::= PRINT LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StmtPrint(e, "regular"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("printStmt",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // printStmt ::= PRINTLN LPAREN expression RPAREN 
            {
              StmtPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StmtPrint(e, "line"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("printStmt",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defStmt ::= DEF VARIABLE expression 
            {
              StmtDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDef(id, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("defStmt",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= factor ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vlstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vlstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp vlst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp alst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDefinition(vlst, alst);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtExpr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= printStmt 
            {
              Statement RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtPrint ps = (StmtPrint)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ps; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= defStmt 
            {
              Statement RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDef ds = (StmtDef)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ds; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList SEMI stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		lst.add(s);
		RESULT = lst;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

