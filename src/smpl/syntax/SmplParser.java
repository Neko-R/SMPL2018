
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 23 14:05:03 EST 2018
//----------------------------------------------------

package smpl.syntax;

import smpl.semantics.*;
import smpl.values.*;
import smpl.syntax.IRExpProc.*;
import smpl.builtIn_necessities.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 23 14:05:03 EST 2018
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\010\005\000\002\002\004\000\002\024\003\000\002" +
    "\024\003\000\002\024\005\000\002\024\003\000\002\024" +
    "\003\000\002\023\005\000\002\023\003\000\002\014\007" +
    "\000\002\014\011\000\002\014\005\000\002\015\003\000" +
    "\002\015\003\000\002\016\006\000\002\016\005\000\002" +
    "\016\004\000\002\016\003\000\002\011\010\000\002\007" +
    "\007\000\002\021\005\000\002\021\003\000\002\022\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\003\000\002\033\002\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\030\005\000\002" +
    "\030\003\000\002\035\004\000\002\035\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\027\003\000\002" +
    "\027\003\000\002\031\005\000\002\031\006\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\003" +
    "\000\002\017\010\000\002\017\006\000\002\017\005\000" +
    "\002\020\005\000\002\020\003\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\070\002\uffda\004\015\006\uffda\012\037\014" +
    "\042\016\005\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\037\025\040\026\043\041\044\046\045\044\046" +
    "\023\050\016\051\012\052\040\053\045\054\020\055\013" +
    "\056\034\057\030\060\022\001\002\000\004\002\220\001" +
    "\002\000\066\004\015\007\uffda\011\uffda\012\037\014\042" +
    "\016\005\017\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\037\025\040\026\043\041\045\044\046\023" +
    "\051\012\052\040\053\045\054\020\055\013\056\034\057" +
    "\030\060\022\001\002\000\024\002\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\011\ufff3\013\ufff3\015\ufff3\017\ufff3\042\ufff3\001" +
    "\002\000\070\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\011\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\041\uffc2\042\uffc2\001\002\000\006\002\001\006\206" +
    "\001\002\000\024\002\ufffd\005\ufffd\006\ufffd\007\ufffd\011" +
    "\ufffd\013\ufffd\015\ufffd\017\ufffd\042\ufffd\001\002\000\070" +
    "\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\041\uffcb" +
    "\042\uffcb\001\002\000\070\002\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\011\uffca\013\uffca\014\uffca\015\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\041\uffca\042\uffca\001\002\000\024\002" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb\013\ufffb\015\ufffb" +
    "\017\ufffb\042\ufffb\001\002\000\062\004\015\005\uffda\012" +
    "\037\014\042\016\005\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\037\025\040\026\043\041\045\044\046" +
    "\023\051\012\052\040\053\045\054\020\055\013\056\034" +
    "\057\030\060\022\001\002\000\102\002\uffda\004\015\005" +
    "\uffda\006\uffda\007\uffda\011\uffda\012\037\013\uffda\014\042" +
    "\015\uffda\016\005\017\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\037\025\040\026\042\uffda\043\041" +
    "\045\044\046\023\051\012\052\040\053\045\054\020\055" +
    "\013\056\034\057\030\060\022\001\002\000\046\002\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\155\036\156\041\uffdb\042\uffdb\001\002\000\070\002" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\041\uffc8\042" +
    "\uffc8\001\002\000\024\002\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\011\ufffc\013\ufffc\015\ufffc\017\ufffc\042\ufffc\001\002\000" +
    "\070\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\041" +
    "\uffc4\042\uffc4\001\002\000\004\004\176\001\002\000\024" +
    "\002\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\015" +
    "\ufff5\017\ufff5\042\ufff5\001\002\000\034\004\015\014\042" +
    "\016\005\037\025\046\023\051\012\052\040\053\045\054" +
    "\020\055\013\056\034\057\030\060\022\001\002\000\052" +
    "\004\015\014\042\016\005\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\037\025\041\uffda\046\023\051\012" +
    "\052\040\053\045\054\020\055\013\056\034\057\030\060" +
    "\022\001\002\000\024\002\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\011\ufffa\013\ufffa\015\ufffa\017\ufffa\042\ufffa\001\002\000" +
    "\070\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\041" +
    "\uffc6\042\uffc6\001\002\000\070\002\uffc1\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\001\002\000\062" +
    "\002\uffce\005\uffce\006\uffce\007\uffce\011\uffce\013\uffce\015" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\166\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\041\uffce\042\uffce\001\002\000\060" +
    "\002\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\013\uffd4\015" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\140\023\141\024\137" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\041\uffd4\042\uffd4\001\002\000\070\002\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7\042\uffc7" +
    "\001\002\000\040\002\ufff6\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\013\ufff6\015\ufff6\017\ufff6\027\153\030\147\031\152" +
    "\032\146\033\150\034\151\042\ufff6\001\002\000\052\002" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\013\uffd7\015\uffd7" +
    "\017\uffd7\020\134\021\135\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\041\uffd7\042\uffd7" +
    "\001\002\000\070\004\015\006\uffda\012\037\013\uffda\014" +
    "\042\016\005\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\037\025\040\026\043\041\044\046\045\044\046" +
    "\023\050\016\051\012\052\040\053\045\054\020\055\013" +
    "\056\034\057\030\060\022\001\002\000\070\002\uffc5\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\001" +
    "\002\000\004\004\115\001\002\000\064\004\015\007\uffda" +
    "\012\037\014\042\015\uffda\016\005\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\037\025\040\026\043\041" +
    "\045\044\046\023\051\012\052\040\053\045\054\020\055" +
    "\013\056\034\057\030\060\022\001\002\000\024\002\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2\015\ufff2\017" +
    "\ufff2\042\ufff2\001\002\000\006\004\070\052\071\001\002" +
    "\000\070\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\041\uffc9\042\uffc9\001\002\000\004\052\066\001\002\000" +
    "\066\002\uffcc\004\053\005\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\013\uffcc\014\052\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\054\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\042" +
    "\uffcc\001\002\000\006\002\ufffe\006\ufffe\001\002\000\060" +
    "\002\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013\uffd0\015" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\041\uffd0\042\uffd0\001\002\000\032\004\015" +
    "\014\042\016\005\046\023\051\012\052\040\053\045\054" +
    "\020\055\013\056\034\057\030\060\022\001\002\000\064" +
    "\004\015\005\uffda\007\uffda\012\037\014\042\016\005\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\037\025" +
    "\040\026\043\041\045\044\046\023\051\012\052\040\053" +
    "\045\054\020\055\013\056\034\057\030\060\022\001\002" +
    "\000\102\002\uffda\004\015\005\uffda\006\uffda\007\uffda\011" +
    "\uffda\012\037\013\uffda\014\042\015\uffda\016\005\017\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\037" +
    "\025\040\026\042\uffda\043\041\045\044\046\023\051\012" +
    "\052\040\053\045\054\020\055\013\056\034\057\030\060" +
    "\022\001\002\000\024\002\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\011\ufff9\013\ufff9\015\ufff9\017\ufff9\042\ufff9\001\002\000" +
    "\066\002\uffcc\004\053\005\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\013\uffcc\014\052\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc\042" +
    "\uffcc\001\002\000\006\005\062\007\061\001\002\000\010" +
    "\005\uffb6\007\uffb6\015\uffb6\001\002\000\066\004\015\005" +
    "\uffda\007\uffda\012\037\014\042\015\uffda\016\005\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\037\025\040" +
    "\026\043\041\045\044\046\023\051\012\052\040\053\045" +
    "\054\020\055\013\056\034\057\030\060\022\001\002\000" +
    "\070\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\041" +
    "\uffb9\042\uffb9\001\002\000\010\005\uffb7\007\uffb7\015\uffb7" +
    "\001\002\000\010\004\053\014\052\015\065\001\002\000" +
    "\070\002\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\041" +
    "\uffbf\042\uffbf\001\002\000\102\002\uffda\004\015\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\012\037\013\uffda\014\042\015" +
    "\uffda\016\005\017\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\037\025\040\026\042\uffda\043\041\045" +
    "\044\046\023\051\012\052\040\053\045\054\020\055\013" +
    "\056\034\057\030\060\022\001\002\000\024\002\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\011\ufff8\013\ufff8\015\ufff8\017\ufff8" +
    "\042\ufff8\001\002\000\014\005\uffb5\007\uffb5\010\uffb5\047" +
    "\076\052\077\001\002\000\106\002\uffda\004\015\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\012\037\013\uffda\014\042\015" +
    "\uffda\016\005\017\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\037\025\040\026\042\uffda\043\041\044" +
    "\046\045\044\046\023\050\016\051\012\052\040\053\045" +
    "\054\020\055\013\056\034\057\030\060\022\001\002\000" +
    "\024\002\uffed\005\uffed\006\uffed\007\uffed\011\uffed\013\uffed" +
    "\015\uffed\017\uffed\042\uffed\001\002\000\010\005\102\007" +
    "\101\010\103\001\002\000\010\005\uffec\007\uffec\010\uffec" +
    "\001\002\000\010\005\uffeb\007\uffeb\010\uffeb\001\002\000" +
    "\004\052\100\001\002\000\010\005\uffe7\007\uffe7\010\uffe7" +
    "\001\002\000\010\005\uffe8\007\uffe8\010\uffe8\001\002\000" +
    "\006\047\110\052\111\001\002\000\106\002\uffda\004\015" +
    "\005\uffda\006\uffda\007\uffda\011\uffda\012\037\013\uffda\014" +
    "\042\015\uffda\016\005\017\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\037\025\040\026\042\uffda\043" +
    "\041\044\046\045\044\046\023\050\016\051\012\052\040" +
    "\053\045\054\020\055\013\056\034\057\030\060\022\001" +
    "\002\000\004\052\104\001\002\000\004\005\105\001\002" +
    "\000\106\002\uffda\004\015\005\uffda\006\uffda\007\uffda\011" +
    "\uffda\012\037\013\uffda\014\042\015\uffda\016\005\017\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\037" +
    "\025\040\026\042\uffda\043\041\044\046\045\044\046\023" +
    "\050\016\051\012\052\040\053\045\054\020\055\013\056" +
    "\034\057\030\060\022\001\002\000\024\002\uffee\005\uffee" +
    "\006\uffee\007\uffee\011\uffee\013\uffee\015\uffee\017\uffee\042" +
    "\uffee\001\002\000\024\002\uffef\005\uffef\006\uffef\007\uffef" +
    "\011\uffef\013\uffef\015\uffef\017\uffef\042\uffef\001\002\000" +
    "\004\052\112\001\002\000\010\005\uffe9\007\uffe9\010\uffe9" +
    "\001\002\000\010\005\uffea\007\uffea\010\uffea\001\002\000" +
    "\006\007\061\015\114\001\002\000\070\002\uffb8\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\011\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\001\002" +
    "\000\004\052\120\001\002\000\006\005\124\007\123\001" +
    "\002\000\006\005\uffe3\007\uffe3\001\002\000\004\027\121" +
    "\001\002\000\064\004\015\005\uffda\007\uffda\012\037\014" +
    "\042\016\005\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\037\025\040\026\043\041\045\044\046\023\051" +
    "\012\052\040\053\045\054\020\055\013\056\034\057\030" +
    "\060\022\001\002\000\006\005\uffe2\007\uffe2\001\002\000" +
    "\004\052\120\001\002\000\106\002\uffda\004\015\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\012\037\013\uffda\014\042\015" +
    "\uffda\016\005\017\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\037\025\040\026\042\uffda\043\041\044" +
    "\046\045\044\046\023\050\016\051\012\052\040\053\045" +
    "\054\020\055\013\056\034\057\030\060\022\001\002\000" +
    "\024\002\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\013\uffe5" +
    "\015\uffe5\017\uffe5\042\uffe5\001\002\000\006\005\uffe4\007" +
    "\uffe4\001\002\000\006\006\131\013\132\001\002\000\006" +
    "\006\ufff0\013\ufff0\001\002\000\070\004\015\006\uffda\012" +
    "\037\013\uffda\014\042\016\005\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\037\025\040\026\043\041\044" +
    "\046\045\044\046\023\050\016\051\012\052\040\053\045" +
    "\054\020\055\013\056\034\057\030\060\022\001\002\000" +
    "\024\002\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\013\ufff4" +
    "\015\ufff4\017\ufff4\042\ufff4\001\002\000\006\006\ufff1\013" +
    "\ufff1\001\002\000\034\004\015\014\042\016\005\037\025" +
    "\046\023\051\012\052\040\053\045\054\020\055\013\056" +
    "\034\057\030\060\022\001\002\000\034\004\015\014\042" +
    "\016\005\037\025\046\023\051\012\052\040\053\045\054" +
    "\020\055\013\056\034\057\030\060\022\001\002\000\060" +
    "\002\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\013\uffd5\015" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\140\023\141\024\137" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\041\uffd5\042\uffd5\001\002\000\034\004\015" +
    "\014\042\016\005\037\025\046\023\051\012\052\040\053" +
    "\045\054\020\055\013\056\034\057\030\060\022\001\002" +
    "\000\034\004\015\014\042\016\005\037\025\046\023\051" +
    "\012\052\040\053\045\054\020\055\013\056\034\057\030" +
    "\060\022\001\002\000\034\004\015\014\042\016\005\037" +
    "\025\046\023\051\012\052\040\053\045\054\020\055\013" +
    "\056\034\057\030\060\022\001\002\000\060\002\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\011\uffd2\013\uffd2\015\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\041\uffd2\042\uffd2\001\002\000\060\002\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\011\uffd3\013\uffd3\015\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\041\uffd3" +
    "\042\uffd3\001\002\000\060\002\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\013\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\042\uffd1" +
    "\001\002\000\060\002\uffd6\005\uffd6\006\uffd6\007\uffd6\011" +
    "\uffd6\013\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022\140" +
    "\023\141\024\137\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\041\uffd6\042\uffd6\001\002" +
    "\000\034\004\015\014\042\016\005\037\025\046\023\051" +
    "\012\052\040\053\045\054\020\055\013\056\034\057\030" +
    "\060\022\001\002\000\034\004\015\014\042\016\005\037" +
    "\025\046\023\051\012\052\040\053\045\054\020\055\013" +
    "\056\034\057\030\060\022\001\002\000\034\004\015\014" +
    "\042\016\005\037\025\046\023\051\012\052\040\053\045" +
    "\054\020\055\013\056\034\057\030\060\022\001\002\000" +
    "\034\004\015\014\042\016\005\037\025\046\023\051\012" +
    "\052\040\053\045\054\020\055\013\056\034\057\030\060" +
    "\022\001\002\000\034\004\015\014\042\016\005\037\025" +
    "\046\023\051\012\052\040\053\045\054\020\055\013\056" +
    "\034\057\030\060\022\001\002\000\034\004\015\014\042" +
    "\016\005\037\025\046\023\051\012\052\040\053\045\054" +
    "\020\055\013\056\034\057\030\060\022\001\002\000\046" +
    "\002\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\013\uffe1\015" +
    "\uffe1\017\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\155\036\156\041\uffe1\042\uffe1\001\002\000" +
    "\034\004\015\014\042\016\005\037\025\046\023\051\012" +
    "\052\040\053\045\054\020\055\013\056\034\057\030\060" +
    "\022\001\002\000\034\004\015\014\042\016\005\037\025" +
    "\046\023\051\012\052\040\053\045\054\020\055\013\056" +
    "\034\057\030\060\022\001\002\000\052\002\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\011\uffd8\013\uffd8\015\uffd8\017\uffd8\020" +
    "\134\021\135\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\041\uffd8\042\uffd8\001\002\000" +
    "\052\002\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\013\uffd9" +
    "\015\uffd9\017\uffd9\020\134\021\135\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\041\uffd9" +
    "\042\uffd9\001\002\000\046\002\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\011\uffdf\013\uffdf\015\uffdf\017\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\155\036\156\041" +
    "\uffdf\042\uffdf\001\002\000\046\002\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\011\uffdc\013\uffdc\015\uffdc\017\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\155\036\156" +
    "\041\uffdc\042\uffdc\001\002\000\046\002\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\011\uffdd\013\uffdd\015\uffdd\017\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\155\036" +
    "\156\041\uffdd\042\uffdd\001\002\000\046\002\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\011\uffe0\013\uffe0\015\uffe0\017\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\155" +
    "\036\156\041\uffe0\042\uffe0\001\002\000\046\002\uffde\005" +
    "\uffde\006\uffde\007\uffde\011\uffde\013\uffde\015\uffde\017\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\155\036\156\041\uffde\042\uffde\001\002\000\034\004\015" +
    "\014\042\016\005\037\025\046\023\051\012\052\040\053" +
    "\045\054\020\055\013\056\034\057\030\060\022\001\002" +
    "\000\060\002\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\013" +
    "\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\041\uffcf\042\uffcf\001\002\000\020" +
    "\027\153\030\147\031\152\032\146\033\150\034\151\041" +
    "\171\001\002\000\066\004\015\012\037\014\042\016\005" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\037" +
    "\025\040\026\042\uffda\043\041\044\046\045\044\046\023" +
    "\050\016\051\012\052\040\053\045\054\020\055\013\056" +
    "\034\057\030\060\022\001\002\000\004\042\173\001\002" +
    "\000\106\002\uffda\004\015\005\uffda\006\uffda\007\uffda\011" +
    "\uffda\012\037\013\uffda\014\042\015\uffda\016\005\017\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\037" +
    "\025\040\026\042\uffda\043\041\044\046\045\044\046\023" +
    "\050\016\051\012\052\040\053\045\054\020\055\013\056" +
    "\034\057\030\060\022\001\002\000\024\002\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\011\uffe6\013\uffe6\015\uffe6\017\uffe6\042" +
    "\uffe6\001\002\000\062\002\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\011\uffcd\013\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\041\uffcd\042" +
    "\uffcd\001\002\000\032\004\015\014\042\016\005\046\023" +
    "\051\012\052\040\053\045\054\020\055\013\056\034\057" +
    "\030\060\022\001\002\000\010\004\053\007\200\014\052" +
    "\001\002\000\032\004\015\014\042\016\005\046\023\051" +
    "\012\052\040\053\045\054\020\055\013\056\034\057\030" +
    "\060\022\001\002\000\010\004\053\005\202\014\052\001" +
    "\002\000\070\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\011\uffba\013\uffba\014\uffba\015\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\041\uffba\042\uffba\001\002\000\024\002\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\011\ufff7\013\ufff7\015\ufff7\017\ufff7\042" +
    "\ufff7\001\002\000\004\005\205\001\002\000\070\002\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3" +
    "\001\002\000\070\002\uffda\004\015\006\uffda\012\037\014" +
    "\042\016\005\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\037\025\040\026\043\041\044\046\045\044\046" +
    "\023\050\016\051\012\052\040\053\045\054\020\055\013" +
    "\056\034\057\030\060\022\001\002\000\006\002\uffff\006" +
    "\uffff\001\002\000\006\007\215\017\216\001\002\000\006" +
    "\007\uffbd\017\uffbd\001\002\000\010\007\uffbb\011\213\017" +
    "\uffbb\001\002\000\004\045\044\001\002\000\006\007\uffbc" +
    "\017\uffbc\001\002\000\066\004\015\007\uffda\011\uffda\012" +
    "\037\014\042\016\005\017\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\037\025\040\026\043\041\045" +
    "\044\046\023\051\012\052\040\053\045\054\020\055\013" +
    "\056\034\057\030\060\022\001\002\000\070\002\uffc0\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042\uffc0\001" +
    "\002\000\006\007\uffbe\017\uffbe\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\050\002\013\003\003\004\007\005\047\006" +
    "\010\007\023\010\020\011\042\014\005\017\030\024\026" +
    "\025\035\026\032\027\046\030\050\031\006\033\034\034" +
    "\016\035\031\001\001\000\002\001\001\000\040\007\023" +
    "\011\042\012\207\013\210\014\005\017\030\024\211\025" +
    "\035\026\032\027\055\030\050\031\006\033\034\034\016" +
    "\035\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\023\011\042\014" +
    "\005\017\030\024\203\025\035\026\032\027\055\030\050" +
    "\031\006\033\034\034\016\035\031\001\001\000\034\007" +
    "\023\011\042\014\005\017\030\024\202\025\035\026\032" +
    "\027\055\030\050\031\006\033\034\034\016\035\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\030\027\055\031\006\035\174\001\001\000\024" +
    "\017\030\025\035\026\032\027\055\030\050\031\006\033" +
    "\167\034\016\035\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\002\013\005\127\006\010\007\023\010\020\011" +
    "\042\014\005\017\030\023\126\024\026\025\035\026\032" +
    "\027\046\030\050\031\006\033\034\034\016\035\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\023" +
    "\011\042\014\005\017\030\020\112\024\057\025\035\026" +
    "\032\027\055\030\050\031\006\033\034\034\016\035\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\030\027\063\031\006\001" +
    "\001\000\036\007\023\011\042\014\005\017\030\020\056" +
    "\024\057\025\035\026\032\027\055\030\050\031\006\033" +
    "\034\034\016\035\031\001\001\000\034\007\023\011\042" +
    "\014\005\017\030\024\054\025\035\026\032\027\055\030" +
    "\050\031\006\033\034\034\016\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\007\023\011\042\014\005\017\030\024\062" +
    "\025\035\026\032\027\055\030\050\031\006\033\034\034" +
    "\016\035\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\023\011" +
    "\042\014\005\017\030\024\066\025\035\026\032\027\055" +
    "\030\050\031\006\033\034\034\016\035\031\001\001\000" +
    "\002\001\001\000\010\015\072\016\073\032\074\001\001" +
    "\000\044\002\013\005\071\006\010\007\023\010\020\011" +
    "\042\014\005\017\030\024\026\025\035\026\032\027\046" +
    "\030\050\031\006\033\034\034\016\035\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\002\013\005\106\006\010" +
    "\007\023\010\020\011\042\014\005\017\030\024\026\025" +
    "\035\026\032\027\046\030\050\031\006\033\034\034\016" +
    "\035\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\002\013\005\105\006\010\007\023\010\020\011\042" +
    "\014\005\017\030\024\026\025\035\026\032\027\046\030" +
    "\050\031\006\033\034\034\016\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\115\022\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\023\011\042" +
    "\014\005\017\030\024\121\025\035\026\032\027\055\030" +
    "\050\031\006\033\034\034\016\035\031\001\001\000\002" +
    "\001\001\000\004\022\125\001\001\000\044\002\013\005" +
    "\124\006\010\007\023\010\020\011\042\014\005\017\030" +
    "\024\026\025\035\026\032\027\046\030\050\031\006\033" +
    "\034\034\016\035\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\002" +
    "\013\005\132\006\010\007\023\010\020\011\042\014\005" +
    "\017\030\024\026\025\035\026\032\027\046\030\050\031" +
    "\006\033\034\034\016\035\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\030\026\144\027\055\030" +
    "\050\031\006\035\031\001\001\000\016\017\030\026\135" +
    "\027\055\030\050\031\006\035\031\001\001\000\002\001" +
    "\001\000\014\017\030\027\055\030\143\031\006\035\031" +
    "\001\001\000\014\017\030\027\055\030\142\031\006\035" +
    "\031\001\001\000\014\017\030\027\055\030\141\031\006" +
    "\035\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\030\025\035" +
    "\026\032\027\055\030\050\031\006\034\164\035\031\001" +
    "\001\000\022\017\030\025\035\026\032\027\055\030\050" +
    "\031\006\034\163\035\031\001\001\000\022\017\030\025" +
    "\035\026\032\027\055\030\050\031\006\034\162\035\031" +
    "\001\001\000\022\017\030\025\035\026\032\027\055\030" +
    "\050\031\006\034\161\035\031\001\001\000\022\017\030" +
    "\025\035\026\032\027\055\030\050\031\006\034\160\035" +
    "\031\001\001\000\022\017\030\025\035\026\032\027\055" +
    "\030\050\031\006\034\153\035\031\001\001\000\002\001" +
    "\001\000\020\017\030\025\157\026\032\027\055\030\050" +
    "\031\006\035\031\001\001\000\020\017\030\025\156\026" +
    "\032\027\055\030\050\031\006\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\030\027\055\030\166\031\006\035\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\002\013" +
    "\005\171\006\010\007\023\010\020\011\042\014\005\017" +
    "\030\024\026\025\035\026\032\027\046\030\050\031\006" +
    "\033\034\034\016\035\031\001\001\000\002\001\001\000" +
    "\044\002\013\005\173\006\010\007\023\010\020\011\042" +
    "\014\005\017\030\024\026\025\035\026\032\027\046\030" +
    "\050\031\006\033\034\034\016\035\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\030\027\176\031" +
    "\006\001\001\000\002\001\001\000\010\017\030\027\200" +
    "\031\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\002\013\005\206\006\010\007\023\010\020\011\042\014" +
    "\005\017\030\024\026\025\035\026\032\027\046\030\050" +
    "\031\006\033\034\034\016\035\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\213\001\001\000\002\001\001\000\036\007" +
    "\023\011\042\013\216\014\005\017\030\024\211\025\035" +
    "\026\032\027\055\030\050\031\006\033\034\034\016\035" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		//SmplLexer lexer;

		//InputStreamReader in = null;

		//public SmplParser(InputStream is) {
	     //   	in = new InputStreamReader(is);
		//}

		//public void report_error(String message, Object info) {
		 //   System.err.println(message);
		//}
        SmplLexer lexer = (SmplLexer) getScanner();
		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",24, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // argList ::= expression 
            {
              ArrayList<IRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<IRExp> lst = new ArrayList<>(); lst.add(e); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // argList ::= argList COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 alst.add(e); RESULT = alst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argList",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // callProc ::= LBRAK argList RBRAK 
            {
              IRExp RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallShort(new IRExpVar("list"), alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // callProc ::= factor LPAREN argList RPAREN 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallShort(f,alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // callProc ::= CALL LPAREN factor COMMA factor RPAREN 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp alst = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpProcCallFull(f, alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("callProc",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // spec ::= expression 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		  RESULT = new Specification(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("spec",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // spec ::= expression COLN procExp 
            {
              Specification RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpProc p = (IRExpProc)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Specification(e,p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("spec",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // specLst ::= spec 
            {
              ArrayList<Specification> RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Specification sp = (Specification)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<Specification> lst = new ArrayList<>(); lst.add(sp); RESULT = lst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("specLst",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // specLst ::= specLst COMMA spec 
            {
              ArrayList<Specification> RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<Specification> slst = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Specification sp = (Specification)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 slst.add(sp); RESULT = slst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("specLst",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unique ::= factor LBRAK factor RBRAK 
            {
              IRExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		IRExp v = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpGetIndex(v, n);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("unique",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unique ::= LVEC specLst RVEC 
            {
              IRExp RESULT =null;
		int slstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int slstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<Specification> slst = (ArrayList<Specification>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new IRExpVector(slst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("unique",23, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= callProc 
            {
              IRExp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp call = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = call; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= unique 
            {
              IRExp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp u = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = u; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= LPAREN expression RPAREN 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= NIL 
            {
              IRExp RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String nil = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= VARIABLE 
            {
              IRExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= FALS 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(false); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= TRU 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(true); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= CHARACTER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit("c",ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= STRING 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= DOUBLE 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= INTEGER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // negat ::= factor 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("negat",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // negat ::= BNOT negat 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBnot(n); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("negat",27, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exponent ::= negat 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = n; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("exponent",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exponent ::= negat EXPT exponent 
            {
              IRExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp n = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpExpt(n,expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("exponent",22, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= exponent 
            {
              IRExp RESULT =null;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = expt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= term MOD exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpMod(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= term DIV exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpDiv(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= term MUL exponent 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int exptleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int exptright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp expt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpMul(t, expt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithExp ::= term 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arithExp ::= arithExp MINUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpSub(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arithExp ::= arithExp PLUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpAdd(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bitWiseExp ::= arithExp 
            {
              IRExp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ae; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bitWiseExp ::= bitWiseExp BOR arithExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBor(be, ae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bitWiseExp ::= bitWiseExp BAND arithExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp ae = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpBand(be, ae); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bitWiseExp",26, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relatExp ::= 
            {
              IRExp RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relatExp ::= bitWiseExp 
            {
              IRExp RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = be; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relatExp ::= relatExp NQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpNqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // relatExp ::= relatExp LQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // relatExp ::= relatExp GQT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGqt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relatExp ::= relatExp LST bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLst(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // relatExp ::= relatExp GRT bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGrt(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relatExp ::= relatExp EQV bitWiseExp 
            {
              IRExp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp re = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp be = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpEqv(re, be); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("relatExp",25, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binding ::= VARIABLE EQV expression 
            {
              Binding RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new Binding(id, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bindingList ::= binding 
            {
              BindingList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new BindingList(b); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingList",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bindingList ::= bindingList COMMA binding 
            {
              BindingList RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		BindingList blst = (BindingList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 blst.add(b); RESULT = blst;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingList",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // letExp ::= LET LPAREN bindingList RPAREN stmt 
            {
              IRExpLet RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		BindingList blst = (BindingList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLet(blst, body); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letExp",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifExp ::= IF relatExp THEN stmt ELSE stmt 
            {
              IRExpIf RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		IRExp pred = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int thenClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int thenClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		Statement thenClause = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int elseClauseleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elseClauseright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement elseClause = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpIf(pred,thenClause, elseClause); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ifExp",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramListNE ::= VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("norm", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramListNE ::= LAZY VARIABLE 
            {
              ParamLst RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new ParamLst("lazy", p); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramListNE ::= paramList COMMA VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("norm", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramListNE ::= paramList COMMA LAZY VARIABLE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String pi = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("lazy", pi); RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListNE",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramList ::= empty 
            {
              ParamLst RESULT =null;
		 RESULT = new ParamLst(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramList ::= paramListNE 
            {
              ParamLst RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = plst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procExp ::= PROC VARIABLE stmt 
            {
              IRExpProc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ParamLst lst = new ParamLst("norm", id); RESULT = new IRExpProc(lst, body, "any"); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procExp ::= PROC LPAREN paramList DOT VARIABLE RPAREN stmt 
            {
              IRExpProc RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int prestleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int prestright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String prest = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 plst.add("norm",prest); RESULT = new IRExpProc(plst, body, "least") ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procExp ::= PROC LPAREN paramList RPAREN stmt 
            {
              IRExpProc RESULT =null;
		int plstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ParamLst plst = (ParamLst)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpProc(plst, body, "fixed") ; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("procExp",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compExp ::= stmt 
            {
              IRExpCompExp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpCompExp(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("compExp",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // compExp ::= compExp SEMI stmt 
            {
              IRExpCompExp RESULT =null;
		int compLstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int compLstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExpCompExp compLst = (IRExpCompExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 compLst.add(s); RESULT = compLst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("compExp",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= ifExp 
            {
              IRExp RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpIf ifexp = (IRExpIf)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ifexp; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= procExp 
            {
              IRExp RESULT =null;
		int procstmtleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int procstmtright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpProc procstmt = (IRExpProc)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = procstmt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= LBRACE compExp RBRACE 
            {
              IRExp RESULT =null;
		int compexplstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int compexplstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExpCompExp compexplst = (IRExpCompExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = compexplst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= letExp 
            {
              IRExp RESULT =null;
		int ltstmtleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ltstmtright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpLet ltstmt = (IRExpLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ltstmt; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= relatExp 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // printLnStmt ::= PRINTLN expression 
            {
              StmtPrintLn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtPrintLn(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("printLnStmt",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defStmt ::= DEF VARIABLE expression 
            {
              StmtDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDef(id, e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("defStmt",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= factor ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp v = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDefinition(v, e);
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtExpr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= printLnStmt 
            {
              Statement RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtPrintLn ps = (StmtPrintLn)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ps; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= defStmt 
            {
              Statement RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDef ds = (StmtDef)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ds; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList SEMI stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		lst.add(s);
		RESULT = lst;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

