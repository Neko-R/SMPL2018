package smpl.syntax;
import smpl.semantics.*;
import smpl.values.*;
import smpl.syntax.IRExpProc.*;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		//SmplLexer lexer;

		//InputStreamReader in = null;

		//public SmplParser(InputStream is) {
	     //   	in = new InputStreamReader(is);
		//}

		//public void report_error(String message, Object info) {
		 //   System.err.println(message);
		//}
        SmplLexer lexer = (SmplLexer) getScanner();
		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};
/*
init with {:
		// Create a lexer that reads from
		// supplied input stream or standard input
		if (in == null)
		   in = new InputStreamReader(System.in);
		lexer = new SmplLexer(in);
	  :};
*/
/*
scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};
*/

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN, SEMI, COMMA, DOT;// COLN;
terminal LBRACE, RBRACE;//, LBRAK, RBRAK;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, EXPT, ASSIGN;

// relational operators
terminal EQV, GRT, LST, GQT, LQT, NQT;

// bitwise operators
terminal BAND, BOR, BNOT;

// logical operators
//terminal AND, OR, NOT;

// list operation
//terminal CAT;

// 'if' special form
terminal IF, THEN, ELSE;
//terminal CASE;

// special key words
terminal LET, DEF, PROC, CALL;
terminal LAZY;

terminal PRINTLN;//, PRINT;
non terminal StmtPrintLn printLnStmt;

//terminal READ, READINT;
//terminal COMNLN, LBCOMN, RBCOMN;
// graphical operators (optional)


// terminals with values
terminal Integer INTEGER;
terminal String VARIABLE;
terminal String STRING, CHARACTER;
terminal Double DOUBLE;
terminal String TRU, FALS, NIL;

/* Non terminals */
non terminal SmplProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;

/* Non terminals for LET */
non terminal IRExpLet letExp;

non terminal StmtDef defStmt;

non terminal IRExpIf ifExp;

non terminal IRExpProc procExp;
non terminal ParamLst paramList, paramListNE;
non terminal IRExp callProc;
non terminal ArrayList<IRExp> argList;

non terminal BindingList bindingList;
non terminal Binding binding;

/* Non terminals for compound and multi-valued expressions */
non terminal IRExpCompExp compExp;
//non terminal IRExpMultiExp multiExp;

non terminal IRExp expression;
non terminal IRExp arithExp;
non terminal IRExp term;
non terminal IRExp factor;
non terminal IRExp exponent;
non terminal empty;

non terminal IRExp relatExp, bitWiseExp, negat;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new SmplProgram(s); :};

stmtList ::= stmtList:lst SEMI stmt:s {:
		lst.add(s);
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

/* ----- Add Statements below here ----- */

stmt ::= definition:d {: RESULT = d; :} |
          defStmt: ds {: RESULT = ds; :}|
          printLnStmt:ps {: RESULT = ps; :}|
	      expression:e {: RESULT = new StmtExpr(e); :};

definition ::= VARIABLE:v ASSIGN expression:e {: RESULT = new StmtDefinition(v, e);:};

defStmt ::=	  DEF VARIABLE:id expression:e {: RESULT = new StmtDef(id, e); :};

printLnStmt ::= PRINTLN expression:e {: RESULT = new StmtPrintLn(e); :};

/* ----- Add Expressions below here ----- */

expression ::= relatExp:e {: RESULT = e; :}|
               letExp:ltstmt {: RESULT = ltstmt; :}|
                LBRACE compExp:compexplst RBRACE {: RESULT = compexplst; :}|
                //LPAREN multiExp: multiexplst RPAREN {: RESULT = multiexplst; :};//|
                procExp: procstmt {: RESULT = procstmt; :}|
                ifExp: ifexp {: RESULT = ifexp; :};
                //openIfExp: ifexp {: RESULT = ifexp; :}|
                //closedIfExp: ifexp {: RESULT = ifexp; :};  /* put other types here */

compExp ::= compExp:compLst SEMI stmt:s {: compLst.add(s); RESULT = compLst; :}|
            stmt:s {: RESULT = new IRExpCompExp(s); :};

//multiExp ::= multiExp:multiexplst COMMA expression:e {: multiexplst.add(e); RESULT = multiexplst; :}|
//                expression:e {: RESULT = new IRExpMultiExp(e); :};

procExp ::= PROC LPAREN paramList:plst RPAREN stmt: body {: RESULT = new IRExpProc(plst, body, "fixed") ; :}|
            PROC LPAREN paramList:plst DOT VARIABLE:prest RPAREN stmt: body {: plst.add("norm",prest); RESULT = new IRExpProc(plst, body, "least") ; :}|
            PROC VARIABLE:id stmt:body {: ParamLst lst = new ParamLst("norm", id); RESULT = new IRExpProc(lst, body, "any"); :};

paramList ::= paramListNE:plst{: RESULT = plst; :}|
                   empty {: RESULT = new ParamLst(); :};

paramListNE ::= paramList:plst COMMA LAZY VARIABLE:pi {: plst.add("lazy", pi); RESULT = plst; :}|
                paramList:plst COMMA VARIABLE:pi {: plst.add("norm", pi); RESULT = plst; :}|
                 LAZY VARIABLE:p {: RESULT = new ParamLst("lazy", p); :}|
                 VARIABLE:p {: RESULT = new ParamLst("norm", p); :};

ifExp ::= IF relatExp:pred THEN stmt:thenClause ELSE stmt:elseClause {: RESULT = new IRExpIf(pred,thenClause, elseClause); :};

//otherwise ::= //empty {: /* optional */:} | ELSE stmt: s {: RESULT = s; :};

letExp ::= LET LPAREN bindingList:blst RPAREN stmt:body {: RESULT = new IRExpLet(blst, body); :};

bindingList ::= bindingList:blst COMMA binding:b {: blst.add(b); RESULT = blst;:}|
                binding:b {: RESULT = new BindingList(b); :};

binding ::= VARIABLE:id EQV expression:e {: RESULT = new Binding(id, e); :};

relatExp ::= relatExp:re EQV bitWiseExp:be {: RESULT = new IRExpEqv(re, be); :}|
              relatExp:re GRT bitWiseExp:be {: RESULT = new IRExpGrt(re, be); :}|
               relatExp:re LST bitWiseExp:be {: RESULT = new IRExpLst(re, be); :}|
             relatExp:re GQT bitWiseExp:be {: RESULT = new IRExpGqt(re, be); :}|
             relatExp:re LQT bitWiseExp:be {: RESULT = new IRExpLqt(re, be); :}|
             relatExp:re NQT bitWiseExp:be {: RESULT = new IRExpNqt(re, be); :}|
             bitWiseExp:be {: RESULT = be; :}|;

bitWiseExp ::= bitWiseExp:be BAND arithExp:ae {: RESULT = new IRExpBand(be, ae); :}|
                bitWiseExp:be BOR arithExp:ae {: RESULT = new IRExpBor(be, ae); :}|
                arithExp:ae {: RESULT = ae; :};

arithExp ::= 	arithExp:e PLUS term:t {:
			RESULT = new IRExpAdd(e, t); :} |
		arithExp:e MINUS term:t {:
			RESULT = new IRExpSub(e, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t MUL exponent:expt {:
		RESULT = new IRExpMul(t, expt); :} |
	 term:t DIV exponent:expt {:
		RESULT = new IRExpDiv(t, expt); :} |
	 term:t MOD exponent:expt {:
		RESULT = new IRExpMod(t, expt); :} |
	 exponent:expt {: RESULT = expt; :};

exponent ::= negat:n EXPT exponent:expt {: RESULT = new IRExpExpt(n,expt); :}|
            negat: n {: RESULT = n; :};

negat ::= BNOT negat:n {: RESULT = new IRExpBnot(n); :}|
            factor:f {: RESULT = f; :};

factor ::= INTEGER:ilit {: RESULT = new IRExpLit(ilit); :} |
        DOUBLE:ilit {: RESULT = new IRExpLit(ilit); :} |
        STRING:ilit {: RESULT = new IRExpLit(ilit); :} |
        CHARACTER:ilit {: RESULT = new IRExpLit("c",ilit); :} |
        TRU:ilit {: RESULT = new IRExpLit(true); :} |
        FALS:ilit {: RESULT = new IRExpLit(false); :} |
	   VARIABLE:var {: RESULT = new IRExpVar(var); :} |
	   NIL:nil {: RESULT = new IRExpLit("nil"); :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :} |
	   callProc:call {: RESULT = call; :};

callProc ::=  CALL LPAREN factor:f COMMA factor:alst RPAREN {: RESULT = new IRExpProcCallFull(f, alst); :}|
                //CALL LPAREN VARIABLE:f COMMA VARIABLE:i RPAREN {: RESULT = new IRExpProcCall(f,i); :}|
                factor:f LPAREN argList:alst RPAREN {: RESULT = new IRExpProcCallShort(f,alst); :};//|
                 //VARIABLE:f LPAREN VARIABLE:i RPAREN {: RESULT = new IRExpProcCall(f,i); :};
/*
lstArgs ::= lstArgs:lstargs LPAREN argList:alst RPAREN {: lstargs.add(alst); RESULT = lstargs ; :}|
            LPAREN argList:alst RPAREN {: ArrayList<ArgList> lst = new ArrayList<>(); lst.add(alst); RESULT = lst;:};*/

argList ::= argList:alst COMMA expression:e {: alst.add(e); RESULT = alst; :}|
            expression:e {: ArrayList<IRExp> lst = new ArrayList<>(); lst.add(e); RESULT = lst; :};

empty ::= ;